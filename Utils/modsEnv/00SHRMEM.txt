Shared Memory variables we will use

Definitions in islcommon.h


From params.h, MAX_ML = 40


Unassigned "deposit" variables in the islcommon MODSn structs:

   deposit_d[MAX_ML]: unspecified use array of doubles

   heb_d[MAX_ML]: HEB doubles
   heb_f[MAX_ML]: HEB floats
   heb_i[MAX_ML]: HEB ints
   heb_msg[MAX_ML][80]: HEB 80-char strings

   LLB_f[MAX_ML]: LLB floats
   LLB_i[MAX_ML]: LLB ints
   LLB_msg[MAX_ML][80]: LLB 80-char strings

   UTIL_f[MAX_ML]: IUB floats
   UTIL_i[MAX_ML]: IUB ints
   UTIL_msg[MAX_ML][80]: IUB 80-char strings


MODS Mask Status

  shm_addr->MODS1.maskpos:  char, STOW/IN/UNKNOWN/FAULT/EMPTY ...
  shm_addr->MODS1.slitmaskName[shm_addr->MODS1.active_smask]:  Mask ID

MODS Filter, Grating, and Dichroic IDs

  int device = getMechanismID("rfilter",msgStr)  <-- see mlc.c for one way to do this
                                                     using shm_addr->MODS1.who[i] and MAX_ML

  int ipos = (int) shm_addr->MODS1.pos[device]
  shm_addr->MODS1.rcamfilters[ipos]
  shm_addr->MODS1.bcamfilters[ipos]
  shm_addr->MODS1.rgrating[ipos]
  shm_addr->MODS1.bgrating[ipos]
  shm_addr->MODS1.agwfilters[ipos]
  shm_addr->MODS1.dichroicName[ipos]

  Or you can probe shm_addr->MODS1.state_word[device]
  which allows sensing PWRFAIL, NOCOMM, FAULT, etc. or atoi(state_word) 
     to get numerical position

Hatch State:

  int idHatch = getMechanismID("hatch",msgStr);
  
  if (!shm_addr->MODS1.host[idHatch])
     return HATCH=NOCOMM, meaning device not connected
  else {
     if (strlen(shm_addr->MODS1.state_word[idHatch])<=0) 
        HATCH = FAULT
     else
        HATCH=shm_addr->MODS1.state_word[idHatch]

  Possible Values: HATCH={OPEN,CLOSED,AJAR,FAULT,NOCOMM}

Calibration Tower State

   int idCalib = getMechanismID("calib",msgStr);

  if (!shm_addr->MODS1.host[idCalib])
     return CALIB=NOCOMM, meaning device not connected
  else {
     if (strlen(shm_addr->MODS1.state_word[idCalib])<=0) 
        CALIB = FAULT
     else
        CALIB=shm_addr->MODS1.state_word[idCalib]

  Possible Values: CALIB={IN,OUT,FAULT,NOCOMM}

Glycol Supply/Return Pressure/Temperature

  type: float

  shm_addr->MODS1.glycolSupplyPressure
  shm_addr->MODS1.glycolReturnPressure
  shm_addr->MODS1.glycolSupplyTemperature
  shm_addr->MODS1.glycolReturnTemperature

IUB Air and Ambient Temperatures:

  shm_addr->MODS1.utilBoxAirTemperature
  shm_addr->MODS1.outsideAirTemperature

IEB Readout Temperatures:

  Unused float array, iebTemp[4]:

  MODS_BLUE = 0  <-- Blue channel into even indexes 0,2,..
  MODS_RED = 1   <-- Red channel into odd indexes 1,3,...
  index = MODS_<Chan> + 2*MODS_<Param>

  MODS_IEBTEMP = 0
  MODS_IEBGRT = 1

    IEBTEMPB = shm_addr->MODS1.iebTemp[MODS_BLUE+2*MODS_IEBTEMP]
    IEBTEMPR = shm_addr->MODS1.iebTemp[MODS_RED+2*MODS_IEBTEMP]
    IEBGRT_B = shm_addr->MODS1.iebTemp[MODS_BLUE+2*MODS_IEBGRT]
    IEBGRT_R = shm_addr->MODS1.iebTemp[MODS_RED+2*MODS_IEBGRT]

  to help make the coding a little bit clearer 


IMCS IR Laser State

  int shm_addr->MODS1.lasers.irlaser_state:  1=ON, 0=OFF
  int shm_addr->MODS1.lasers.irbeam_state:   1=Enabled, 0=Disabled

  float shm_addr->MODS1.lasers.irlaser_setpoint: laser output power set point [mW]
  float shm_addr->MODS1.lasers.irlaser_power:    laser output power [mW]
  float shm_addr->MODS1.lasers.irlaser_temp:     laser head temp [C]
  float shm_addr->MODS1.lasers.irlaser_tempSet:  laser head temp set point [C]


Current Instrument Mode:

  int shm_addr->MODS1.instrMode:  0 = OBSMode, 1=CALMode


Electronics Box State variables, used for AC power state

  int shm_addr->MODS1.blueIEBState
  int shm_addr->MODS1.redIEBState
  int shm_addr->MODS1.blueHEBState
  int shm_addr->MODS1.redHEBState
  int shm_addr->MODS1.llbState

  For AGw camera controllers, we need to adopt these unused
  integer variables from the UTIL deposit block:

  agcState == shm_addr->MODS1.UTIL_i[0]
  wfsState == shm_addr->MODS1.UTIL_i[1]

  Power State Values:
    1 = AC Power On normally
    2 = AC Power On via Manual Override (if implemented)
    0 = AC Power Off normally
   -1 = AC Power Fault: switch ON but breaker=0


  
