//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Factory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Factory_h__
#define __Factory_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IIFServer.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace lbto
{

class Factory;
class FactoryPrx;

}

namespace lbto
{

class Factory : public virtual ::Ice::Object
{
public:

    using ProxyType = FactoryPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<IIFServerPrx> create(::std::string proxyName, ::std::string focalStation, ::std::string instrumentID, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_create(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void destroy(::std::shared_ptr<IIFServerPrx> proxy, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_destroy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void destroyProxy(::std::string proxyName, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_destroyProxy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getProxy(::std::string proxyName, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getProxy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getProxyInstrument(::std::string proxyName, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getProxyInstrument(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getProxyFocalStation(::std::string proxyName, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getProxyFocalStation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string listConnections(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_listConnections(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void debugMode(bool b, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_debugMode(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace lbto
{

class FactoryPrx : public virtual ::Ice::Proxy<FactoryPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<IIFServerPrx> create(const ::std::string& proxyName, const ::std::string& focalStation, const ::std::string& instrumentID, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::lbto::IIFServerPrx>>(true, this, &FactoryPrx::_iceI_create, proxyName, focalStation, instrumentID, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto createAsync(const ::std::string& proxyName, const ::std::string& focalStation, const ::std::string& instrumentID, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::lbto::IIFServerPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::lbto::IIFServerPrx>, P>(false, this, &FactoryPrx::_iceI_create, proxyName, focalStation, instrumentID, context);
    }

    ::std::function<void()>
    createAsync(const ::std::string& proxyName, const ::std::string& focalStation, const ::std::string& instrumentID,
                ::std::function<void(::std::shared_ptr<::lbto::IIFServerPrx>)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::lbto::IIFServerPrx>>(std::move(response), std::move(ex), std::move(sent), this, &lbto::FactoryPrx::_iceI_create, proxyName, focalStation, instrumentID, context);
    }

    /// \cond INTERNAL
    void _iceI_create(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::lbto::IIFServerPrx>>>&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void destroy(const ::std::shared_ptr<IIFServerPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &FactoryPrx::_iceI_destroy, proxy, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto destroyAsync(const ::std::shared_ptr<IIFServerPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &FactoryPrx::_iceI_destroy, proxy, context);
    }

    ::std::function<void()>
    destroyAsync(const ::std::shared_ptr<IIFServerPrx>& proxy,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &lbto::FactoryPrx::_iceI_destroy, proxy, context);
    }

    /// \cond INTERNAL
    void _iceI_destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<IIFServerPrx>&, const ::Ice::Context&);
    /// \endcond

    void destroyProxy(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &FactoryPrx::_iceI_destroyProxy, proxyName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto destroyProxyAsync(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &FactoryPrx::_iceI_destroyProxy, proxyName, context);
    }

    ::std::function<void()>
    destroyProxyAsync(const ::std::string& proxyName,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &lbto::FactoryPrx::_iceI_destroyProxy, proxyName, context);
    }

    /// \cond INTERNAL
    void _iceI_destroyProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::string getProxy(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &FactoryPrx::_iceI_getProxy, proxyName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getProxyAsync(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &FactoryPrx::_iceI_getProxy, proxyName, context);
    }

    ::std::function<void()>
    getProxyAsync(const ::std::string& proxyName,
                  ::std::function<void(::std::string)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &lbto::FactoryPrx::_iceI_getProxy, proxyName, context);
    }

    /// \cond INTERNAL
    void _iceI_getProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::string getProxyInstrument(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &FactoryPrx::_iceI_getProxyInstrument, proxyName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getProxyInstrumentAsync(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &FactoryPrx::_iceI_getProxyInstrument, proxyName, context);
    }

    ::std::function<void()>
    getProxyInstrumentAsync(const ::std::string& proxyName,
                            ::std::function<void(::std::string)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &lbto::FactoryPrx::_iceI_getProxyInstrument, proxyName, context);
    }

    /// \cond INTERNAL
    void _iceI_getProxyInstrument(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::string getProxyFocalStation(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &FactoryPrx::_iceI_getProxyFocalStation, proxyName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getProxyFocalStationAsync(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &FactoryPrx::_iceI_getProxyFocalStation, proxyName, context);
    }

    ::std::function<void()>
    getProxyFocalStationAsync(const ::std::string& proxyName,
                              ::std::function<void(::std::string)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &lbto::FactoryPrx::_iceI_getProxyFocalStation, proxyName, context);
    }

    /// \cond INTERNAL
    void _iceI_getProxyFocalStation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::string listConnections(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &FactoryPrx::_iceI_listConnections, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto listConnectionsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &FactoryPrx::_iceI_listConnections, context);
    }

    ::std::function<void()>
    listConnectionsAsync(::std::function<void(::std::string)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &lbto::FactoryPrx::_iceI_listConnections, context);
    }

    /// \cond INTERNAL
    void _iceI_listConnections(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    void debugMode(bool b, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &FactoryPrx::_iceI_debugMode, b, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto debugModeAsync(bool b, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &FactoryPrx::_iceI_debugMode, b, context);
    }

    ::std::function<void()>
    debugModeAsync(bool b,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &lbto::FactoryPrx::_iceI_debugMode, b, context);
    }

    /// \cond INTERNAL
    void _iceI_debugMode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, bool, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    FactoryPrx() = default;
    friend ::std::shared_ptr<FactoryPrx> IceInternal::createProxy<FactoryPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace lbto
{

using FactoryPtr = ::std::shared_ptr<Factory>;
using FactoryPrxPtr = ::std::shared_ptr<FactoryPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace lbto
{

class Factory;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Factory>&);
::IceProxy::Ice::Object* upCast(Factory*);
/// \endcond

}

}

namespace lbto
{

class Factory;
/// \cond INTERNAL
::Ice::Object* upCast(Factory*);
/// \endcond
typedef ::IceInternal::Handle< Factory> FactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::lbto::Factory> FactoryPrx;
typedef FactoryPrx FactoryPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(FactoryPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace lbto
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::lbto::Factory::begin_create.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_create.
 */
class Callback_Factory_create_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Factory_create_Base> Callback_Factory_createPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::lbto::Factory::begin_destroy.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_destroy.
 */
class Callback_Factory_destroy_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Factory_destroy_Base> Callback_Factory_destroyPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::lbto::Factory::begin_destroyProxy.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_destroyProxy.
 */
class Callback_Factory_destroyProxy_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Factory_destroyProxy_Base> Callback_Factory_destroyProxyPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::lbto::Factory::begin_getProxy.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_getProxy.
 */
class Callback_Factory_getProxy_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Factory_getProxy_Base> Callback_Factory_getProxyPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::lbto::Factory::begin_getProxyInstrument.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_getProxyInstrument.
 */
class Callback_Factory_getProxyInstrument_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Factory_getProxyInstrument_Base> Callback_Factory_getProxyInstrumentPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::lbto::Factory::begin_getProxyFocalStation.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_getProxyFocalStation.
 */
class Callback_Factory_getProxyFocalStation_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Factory_getProxyFocalStation_Base> Callback_Factory_getProxyFocalStationPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::lbto::Factory::begin_listConnections.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_listConnections.
 */
class Callback_Factory_listConnections_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Factory_listConnections_Base> Callback_Factory_listConnectionsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::lbto::Factory::begin_debugMode.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_debugMode.
 */
class Callback_Factory_debugMode_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Factory_debugMode_Base> Callback_Factory_debugModePtr;

}

namespace IceProxy
{

namespace lbto
{

class Factory : public virtual ::Ice::Proxy<Factory, ::IceProxy::Ice::Object>
{
public:

    ::lbto::IIFServerPrx create(const ::std::string& proxyName, const ::std::string& focalStation, const ::std::string& instrumentID, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_create(_iceI_begin_create(proxyName, focalStation, instrumentID, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& proxyName, const ::std::string& focalStation, const ::std::string& instrumentID, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_create(proxyName, focalStation, instrumentID, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& proxyName, const ::std::string& focalStation, const ::std::string& instrumentID, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_create(proxyName, focalStation, instrumentID, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& proxyName, const ::std::string& focalStation, const ::std::string& instrumentID, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_create(proxyName, focalStation, instrumentID, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& proxyName, const ::std::string& focalStation, const ::std::string& instrumentID, const ::lbto::Callback_Factory_createPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_create(proxyName, focalStation, instrumentID, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& proxyName, const ::std::string& focalStation, const ::std::string& instrumentID, const ::Ice::Context& context, const ::lbto::Callback_Factory_createPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_create(proxyName, focalStation, instrumentID, context, cb, cookie);
    }

    ::lbto::IIFServerPrx end_create(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_create(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void destroy(const ::lbto::IIFServerPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_destroy(_iceI_begin_destroy(proxy, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::lbto::IIFServerPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_destroy(proxy, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::lbto::IIFServerPrx& proxy, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroy(proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::lbto::IIFServerPrx& proxy, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroy(proxy, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::lbto::IIFServerPrx& proxy, const ::lbto::Callback_Factory_destroyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroy(proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::lbto::IIFServerPrx& proxy, const ::Ice::Context& context, const ::lbto::Callback_Factory_destroyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroy(proxy, context, cb, cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_destroy(const ::lbto::IIFServerPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void destroyProxy(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_destroyProxy(_iceI_begin_destroyProxy(proxyName, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_destroyProxy(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_destroyProxy(proxyName, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroyProxy(const ::std::string& proxyName, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroyProxy(proxyName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyProxy(const ::std::string& proxyName, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroyProxy(proxyName, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyProxy(const ::std::string& proxyName, const ::lbto::Callback_Factory_destroyProxyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroyProxy(proxyName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyProxy(const ::std::string& proxyName, const ::Ice::Context& context, const ::lbto::Callback_Factory_destroyProxyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroyProxy(proxyName, context, cb, cookie);
    }

    void end_destroyProxy(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_destroyProxy(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getProxy(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getProxy(_iceI_begin_getProxy(proxyName, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getProxy(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getProxy(proxyName, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProxy(const ::std::string& proxyName, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxy(proxyName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProxy(const ::std::string& proxyName, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxy(proxyName, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProxy(const ::std::string& proxyName, const ::lbto::Callback_Factory_getProxyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxy(proxyName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProxy(const ::std::string& proxyName, const ::Ice::Context& context, const ::lbto::Callback_Factory_getProxyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxy(proxyName, context, cb, cookie);
    }

    ::std::string end_getProxy(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getProxy(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getProxyInstrument(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getProxyInstrument(_iceI_begin_getProxyInstrument(proxyName, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getProxyInstrument(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getProxyInstrument(proxyName, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProxyInstrument(const ::std::string& proxyName, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxyInstrument(proxyName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProxyInstrument(const ::std::string& proxyName, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxyInstrument(proxyName, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProxyInstrument(const ::std::string& proxyName, const ::lbto::Callback_Factory_getProxyInstrumentPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxyInstrument(proxyName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProxyInstrument(const ::std::string& proxyName, const ::Ice::Context& context, const ::lbto::Callback_Factory_getProxyInstrumentPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxyInstrument(proxyName, context, cb, cookie);
    }

    ::std::string end_getProxyInstrument(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getProxyInstrument(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getProxyFocalStation(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getProxyFocalStation(_iceI_begin_getProxyFocalStation(proxyName, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getProxyFocalStation(const ::std::string& proxyName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getProxyFocalStation(proxyName, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProxyFocalStation(const ::std::string& proxyName, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxyFocalStation(proxyName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProxyFocalStation(const ::std::string& proxyName, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxyFocalStation(proxyName, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProxyFocalStation(const ::std::string& proxyName, const ::lbto::Callback_Factory_getProxyFocalStationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxyFocalStation(proxyName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProxyFocalStation(const ::std::string& proxyName, const ::Ice::Context& context, const ::lbto::Callback_Factory_getProxyFocalStationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProxyFocalStation(proxyName, context, cb, cookie);
    }

    ::std::string end_getProxyFocalStation(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getProxyFocalStation(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string listConnections(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_listConnections(_iceI_begin_listConnections(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_listConnections(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_listConnections(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_listConnections(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listConnections(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listConnections(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listConnections(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listConnections(const ::lbto::Callback_Factory_listConnectionsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listConnections(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listConnections(const ::Ice::Context& context, const ::lbto::Callback_Factory_listConnectionsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listConnections(context, cb, cookie);
    }

    ::std::string end_listConnections(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_listConnections(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void debugMode(bool b, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_debugMode(_iceI_begin_debugMode(b, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_debugMode(bool b, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_debugMode(b, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_debugMode(bool b, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_debugMode(b, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_debugMode(bool b, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_debugMode(b, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_debugMode(bool b, const ::lbto::Callback_Factory_debugModePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_debugMode(b, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_debugMode(bool b, const ::Ice::Context& context, const ::lbto::Callback_Factory_debugModePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_debugMode(b, context, cb, cookie);
    }

    void end_debugMode(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_debugMode(bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace lbto
{

class Factory : public virtual ::Ice::Object
{
public:

    typedef FactoryPrx ProxyType;
    typedef FactoryPtr PointerType;

    virtual ~Factory();

#ifdef ICE_CPP11_COMPILER
    Factory() = default;
    Factory(const Factory&) = default;
    Factory& operator=(const Factory&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual IIFServerPrx create(const ::std::string& proxyName, const ::std::string& focalStation, const ::std::string& instrumentID, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_create(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void destroy(const IIFServerPrx& proxy, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_destroy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void destroyProxy(const ::std::string& proxyName, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_destroyProxy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getProxy(const ::std::string& proxyName, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getProxy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getProxyInstrument(const ::std::string& proxyName, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getProxyInstrument(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getProxyFocalStation(const ::std::string& proxyName, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getProxyFocalStation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string listConnections(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_listConnections(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void debugMode(bool b, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_debugMode(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Factory& lhs, const Factory& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Factory& lhs, const Factory& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace lbto
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::lbto::Factory::begin_create.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_create.
 */
template<class T>
class CallbackNC_Factory_create : public Callback_Factory_create_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const IIFServerPrx&);

    CallbackNC_Factory_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FactoryPrx proxy = FactoryPrx::uncheckedCast(result->getProxy());
        IIFServerPrx ret;
        try
        {
            ret = proxy->end_create(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_create.
 */
template<class T> Callback_Factory_createPtr
newCallback_Factory_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const IIFServerPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_create<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_create.
 */
template<class T> Callback_Factory_createPtr
newCallback_Factory_create(T* instance, void (T::*cb)(const IIFServerPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_create<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::lbto::Factory::begin_create.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_create.
 */
template<class T, typename CT>
class Callback_Factory_create : public Callback_Factory_create_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const IIFServerPrx&, const CT&);

    Callback_Factory_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FactoryPrx proxy = FactoryPrx::uncheckedCast(result->getProxy());
        IIFServerPrx ret;
        try
        {
            ret = proxy->end_create(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_create.
 */
template<class T, typename CT> Callback_Factory_createPtr
newCallback_Factory_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const IIFServerPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_create<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_create.
 */
template<class T, typename CT> Callback_Factory_createPtr
newCallback_Factory_create(T* instance, void (T::*cb)(const IIFServerPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_create<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::lbto::Factory::begin_destroy.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_destroy.
 */
template<class T>
class CallbackNC_Factory_destroy : public Callback_Factory_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Factory_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroy.
 */
template<class T> Callback_Factory_destroyPtr
newCallback_Factory_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_destroy<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroy.
 */
template<class T> Callback_Factory_destroyPtr
newCallback_Factory_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_destroy<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroy.
 */
template<class T> Callback_Factory_destroyPtr
newCallback_Factory_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_destroy<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroy.
 */
template<class T> Callback_Factory_destroyPtr
newCallback_Factory_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_destroy<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::lbto::Factory::begin_destroy.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_destroy.
 */
template<class T, typename CT>
class Callback_Factory_destroy : public Callback_Factory_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Factory_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroy.
 */
template<class T, typename CT> Callback_Factory_destroyPtr
newCallback_Factory_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_destroy<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroy.
 */
template<class T, typename CT> Callback_Factory_destroyPtr
newCallback_Factory_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_destroy<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroy.
 */
template<class T, typename CT> Callback_Factory_destroyPtr
newCallback_Factory_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_destroy<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroy.
 */
template<class T, typename CT> Callback_Factory_destroyPtr
newCallback_Factory_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_destroy<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::lbto::Factory::begin_destroyProxy.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_destroyProxy.
 */
template<class T>
class CallbackNC_Factory_destroyProxy : public Callback_Factory_destroyProxy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Factory_destroyProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroyProxy.
 */
template<class T> Callback_Factory_destroyProxyPtr
newCallback_Factory_destroyProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_destroyProxy<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroyProxy.
 */
template<class T> Callback_Factory_destroyProxyPtr
newCallback_Factory_destroyProxy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_destroyProxy<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroyProxy.
 */
template<class T> Callback_Factory_destroyProxyPtr
newCallback_Factory_destroyProxy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_destroyProxy<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroyProxy.
 */
template<class T> Callback_Factory_destroyProxyPtr
newCallback_Factory_destroyProxy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_destroyProxy<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::lbto::Factory::begin_destroyProxy.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_destroyProxy.
 */
template<class T, typename CT>
class Callback_Factory_destroyProxy : public Callback_Factory_destroyProxy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Factory_destroyProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroyProxy.
 */
template<class T, typename CT> Callback_Factory_destroyProxyPtr
newCallback_Factory_destroyProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_destroyProxy<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroyProxy.
 */
template<class T, typename CT> Callback_Factory_destroyProxyPtr
newCallback_Factory_destroyProxy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_destroyProxy<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroyProxy.
 */
template<class T, typename CT> Callback_Factory_destroyProxyPtr
newCallback_Factory_destroyProxy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_destroyProxy<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_destroyProxy.
 */
template<class T, typename CT> Callback_Factory_destroyProxyPtr
newCallback_Factory_destroyProxy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_destroyProxy<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::lbto::Factory::begin_getProxy.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_getProxy.
 */
template<class T>
class CallbackNC_Factory_getProxy : public Callback_Factory_getProxy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Factory_getProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FactoryPrx proxy = FactoryPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getProxy(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxy.
 */
template<class T> Callback_Factory_getProxyPtr
newCallback_Factory_getProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_getProxy<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxy.
 */
template<class T> Callback_Factory_getProxyPtr
newCallback_Factory_getProxy(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_getProxy<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::lbto::Factory::begin_getProxy.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_getProxy.
 */
template<class T, typename CT>
class Callback_Factory_getProxy : public Callback_Factory_getProxy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Factory_getProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FactoryPrx proxy = FactoryPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getProxy(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxy.
 */
template<class T, typename CT> Callback_Factory_getProxyPtr
newCallback_Factory_getProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_getProxy<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxy.
 */
template<class T, typename CT> Callback_Factory_getProxyPtr
newCallback_Factory_getProxy(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_getProxy<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::lbto::Factory::begin_getProxyInstrument.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_getProxyInstrument.
 */
template<class T>
class CallbackNC_Factory_getProxyInstrument : public Callback_Factory_getProxyInstrument_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Factory_getProxyInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FactoryPrx proxy = FactoryPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getProxyInstrument(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxyInstrument.
 */
template<class T> Callback_Factory_getProxyInstrumentPtr
newCallback_Factory_getProxyInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_getProxyInstrument<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxyInstrument.
 */
template<class T> Callback_Factory_getProxyInstrumentPtr
newCallback_Factory_getProxyInstrument(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_getProxyInstrument<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::lbto::Factory::begin_getProxyInstrument.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_getProxyInstrument.
 */
template<class T, typename CT>
class Callback_Factory_getProxyInstrument : public Callback_Factory_getProxyInstrument_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Factory_getProxyInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FactoryPrx proxy = FactoryPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getProxyInstrument(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxyInstrument.
 */
template<class T, typename CT> Callback_Factory_getProxyInstrumentPtr
newCallback_Factory_getProxyInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_getProxyInstrument<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxyInstrument.
 */
template<class T, typename CT> Callback_Factory_getProxyInstrumentPtr
newCallback_Factory_getProxyInstrument(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_getProxyInstrument<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::lbto::Factory::begin_getProxyFocalStation.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_getProxyFocalStation.
 */
template<class T>
class CallbackNC_Factory_getProxyFocalStation : public Callback_Factory_getProxyFocalStation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Factory_getProxyFocalStation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FactoryPrx proxy = FactoryPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getProxyFocalStation(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxyFocalStation.
 */
template<class T> Callback_Factory_getProxyFocalStationPtr
newCallback_Factory_getProxyFocalStation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_getProxyFocalStation<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxyFocalStation.
 */
template<class T> Callback_Factory_getProxyFocalStationPtr
newCallback_Factory_getProxyFocalStation(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_getProxyFocalStation<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::lbto::Factory::begin_getProxyFocalStation.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_getProxyFocalStation.
 */
template<class T, typename CT>
class Callback_Factory_getProxyFocalStation : public Callback_Factory_getProxyFocalStation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Factory_getProxyFocalStation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FactoryPrx proxy = FactoryPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getProxyFocalStation(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxyFocalStation.
 */
template<class T, typename CT> Callback_Factory_getProxyFocalStationPtr
newCallback_Factory_getProxyFocalStation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_getProxyFocalStation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_getProxyFocalStation.
 */
template<class T, typename CT> Callback_Factory_getProxyFocalStationPtr
newCallback_Factory_getProxyFocalStation(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_getProxyFocalStation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::lbto::Factory::begin_listConnections.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_listConnections.
 */
template<class T>
class CallbackNC_Factory_listConnections : public Callback_Factory_listConnections_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Factory_listConnections(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FactoryPrx proxy = FactoryPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_listConnections(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_listConnections.
 */
template<class T> Callback_Factory_listConnectionsPtr
newCallback_Factory_listConnections(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_listConnections<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_listConnections.
 */
template<class T> Callback_Factory_listConnectionsPtr
newCallback_Factory_listConnections(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_listConnections<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::lbto::Factory::begin_listConnections.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_listConnections.
 */
template<class T, typename CT>
class Callback_Factory_listConnections : public Callback_Factory_listConnections_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Factory_listConnections(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FactoryPrx proxy = FactoryPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_listConnections(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_listConnections.
 */
template<class T, typename CT> Callback_Factory_listConnectionsPtr
newCallback_Factory_listConnections(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_listConnections<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_listConnections.
 */
template<class T, typename CT> Callback_Factory_listConnectionsPtr
newCallback_Factory_listConnections(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_listConnections<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::lbto::Factory::begin_debugMode.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_debugMode.
 */
template<class T>
class CallbackNC_Factory_debugMode : public Callback_Factory_debugMode_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Factory_debugMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_debugMode.
 */
template<class T> Callback_Factory_debugModePtr
newCallback_Factory_debugMode(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_debugMode<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_debugMode.
 */
template<class T> Callback_Factory_debugModePtr
newCallback_Factory_debugMode(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_debugMode<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_debugMode.
 */
template<class T> Callback_Factory_debugModePtr
newCallback_Factory_debugMode(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_debugMode<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_debugMode.
 */
template<class T> Callback_Factory_debugModePtr
newCallback_Factory_debugMode(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Factory_debugMode<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::lbto::Factory::begin_debugMode.
 * Create a wrapper instance by calling ::lbto::newCallback_Factory_debugMode.
 */
template<class T, typename CT>
class Callback_Factory_debugMode : public Callback_Factory_debugMode_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Factory_debugMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_debugMode.
 */
template<class T, typename CT> Callback_Factory_debugModePtr
newCallback_Factory_debugMode(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_debugMode<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_debugMode.
 */
template<class T, typename CT> Callback_Factory_debugModePtr
newCallback_Factory_debugMode(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_debugMode<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_debugMode.
 */
template<class T, typename CT> Callback_Factory_debugModePtr
newCallback_Factory_debugMode(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_debugMode<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::lbto::Factory::begin_debugMode.
 */
template<class T, typename CT> Callback_Factory_debugModePtr
newCallback_Factory_debugMode(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Factory_debugMode<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
