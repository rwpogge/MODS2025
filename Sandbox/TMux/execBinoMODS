#!/bin/csh
#
# execBinoMODS - binocular MODS data acquisition or instrument config
#
# Usage:
#   execBinoMODS mods.obs
# or
#   execBinoMODS mods1.obs mods2.obs
#
# Overview:
#   Executes binocular MODS data acquisition or instrument
#   configuration scripts.  execBinoMODS takes one or two command-line
#   arguments: the name(s) of observing script(s) to execute in
#   binocular context.
#
#   If only one .obs script is given, it is executed on both MODS
#   instruments ("identical twinning").
#
#   If two .obs scripts are given, they are executed on MODS1 and
#   MODS2 in the order MODS1 MODS2.
#
#   This version expects to be launched from the command pane of a
#   modsTerm tmux session.  This scripts runs in the lower command
#   pane, while the MODS1 and MODS2 execMODS scripts execute in the
#   upper left and upper right panes, respectively.  This new method
#   keeps the command and execution windows together in a single tmux
#   session and nothing disappears when execution is completed. Using
#   tmux makes execution entirely text based, so it will work with
#   minimal bandwidth over remote ssh connections.
#
#   If you are not in a modsTerm, or none is running, it will give
#   instructions on what to do.  It resizes the terminal on launch to
#   a good size for the session, preset below.
#
#   Upon successful completion of script execution or upon faults that
#   terminate script execution with errors, the error messages for
#   each MODS instance stay resident in their respective modsTerm
#   panes.  This is a significant departure from the behavior of the
#   pre-Archon versions of execBinoMODS.
#
# Author:
#   R. Pogge, OSU Astronomy Dept.
#   pogge.1@osu.edu
#   2015 Jan 05
#
# Modification History:
#   2016 Oct 17: First full binocular release for 2016B [rwp/osu]
#   2025 Oct 14: tmux version for the MODS Archon control system [rwp/osu]
#
#---------------------------------------------------------------------------

setenv modsBin /lbt/lbto/mods/bin
setenv configDir /lbt/lbto/mods/.config

set prog=`basename $0`

# process the command line

if ($#argv == 1) then
   set mods1Script = $1
   set mods2Script = $1
else if ($#argv == 2) then
   set mods1Script = $1
   set mods2Script = $2
else
   printf "\nUsage:\n"
   printf "   execBinoMODS common.obs\n"
   printf "or\n"
   printf "   execBinoMODS mods1.obs mods2.obs\n\n"
   exit 0
endif

# Do we have a modsTerm tmux session running?

tmux has-session -t modsTerm >& /dev/null
if ($status) then
   # no tmux session named modsTerm...
   printf "${prog} needs to be run in a modsTerm tmux session but none is running\n"
   printf "    Type 'modsTerm' to start a new modsTerm tmux session and try again.\n"
   exit 1
else
   # there is a tmux session named modsTerm, are we in it?
   if ( ! $?TMUX ) then
      # that would be a no...
      printf "${prog} needs to be run in a modsTerm tmux session, but you're not in it.\n"
      printf "   Either go to the active window on the desktop, or\n"
      printf "   type 'modsTerm' to attach to the current modsTerm session\n"
      exit 1
   endif
endif

# We are attached to the modsTerm tmux session.
#
# Where are we being run from?  Make sure all panes are in the same folder
# as the command pane before we start

set whereAmI=$cwd

tmux send-keys -t modsTerm:1.0 "cd ${whereAmI}" C-m
tmux send-keys -t modsTerm:1.1 "cd ${whereAmI}" C-m

# now launch the execMODS script engines in each pane

tmux send-keys -t modsTerm:1.0 "${modsBin}/execMODS --mods1 --bino ${mods1Script}" C-m
tmux send-keys -t modsTerm:1.1 "${modsBin}/execMODS --mods2 --bino ${mods2Script}" C-m

exit 0
