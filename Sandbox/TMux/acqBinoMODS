#!/bin/csh
#
# acqBinoMODS - execute a binocular MODS target acquisition
#
# Usage:
#   acqBinoMODS mods.acq
# or
#   acqBinoMODS mods1.acq mods2.acq
#
# Overview:
#   Executes a binocular MODS target acquisition.  acqBinoMODS takes one
#   or two command-line arguments: the name(s) of acquisition script(s) to
#   execute in binocular context.  
#
#   If only one .acq script is given, it is executed on both MODS
#   instruments ("identical twinning").
#
#   If two .acq scripts are given, they are executed on MODS1 and
#   MODS2 in the order MODS1 MODS2.
#
#   This version expects to be launched from the command pane of
#   a modsTerm tmux session.  This scripts runs in the lower
#   command pane, while the MODS1 and MODS2 acqMODS scripts
#   execute in the upper left and upper right panes, respectively.
#   This new method keeps the command and execution windows together
#   in a single xterm.
#
#   Upon successful completion of script execution or upon faults that
#   terminate script execution with errors, the terminal windows for
#   each MODS instance stay up so that the messages may be read by the
#   observer.
#
# Author:
#   R. Pogge, OSU Astronomy Dept.
#   pogge.1@osu.edu
#   2015 Jan 05
#
# Modification History:
#   2016 Oct 17: First full binocular release for 2016B [rwp/osu]
#   2025 OCt 14: tmux version for the MODS Archon control system [rwp/osu]
#
#---------------------------------------------------------------------------

setenv modsBin /home/dts/bin
setenv configDir /lbt/lbto/mods/.config

set prog=`basename $0`

if ($#argv == 1) then
   set mods1Script = $1
   set mods2Script = $1
else if ($#argv == 2) then
   set mods1Script = $1
   set mods2Script = $2
else
   printf "\nUsage:\n"
   printf "   acqBinoMODS common.acq\n"
   printf "or\n"
   printf "   acqBinoMODS mods1.acq mods2.acq\n\n"
   exit 0
endif

# Do we have a modsTerm tmux session running?

tmux has-session -t modsTerm >& /dev/null
if ($status) then
   printf "${prog} needs to be run in a modsTerm session - type 'modsTerm' to create one\n"
   exit 1
else
   if ( ! $?TMUX) then
      printf "${prog} needs to be run in a modsTerm session.\n"

      printf "   either go- type 'modsTerm' to attach\n"
      exit 1
   endif
endif

# we are attached, do it

# Where are we?  Make sure all panes are there before we start

set whereAmI=$cwd

tmux send-keys -t modsTerm:1.0 "cd ${whereAmI}" C-m
tmux send-keys -t modsTerm:1.1 "cd ${whereAmI}" C-m

# now launch the script engines in each pane

tmux send-keys -t modsTerm:1.0 "${modsBin}/simAcq --mods1 --bino ${mods1Script}" C-m
tmux send-keys -t modsTerm:1.1 "${modsBin}/simAcq --mods2 --bino ${mods2Script}" C-m

exit 0
