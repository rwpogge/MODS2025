#!/usr/bin/wish -f
# vue_modsqc source for the Tk toolkit
# Basic font for button, menus and labels
# Product of OSU/ISL Astronomy Dept.
# to be incorporated into ISL software
 
  # Window manager configurations
  set ICONDIR /home2/isl/TclTK/images
  set LIBDIR /home2/isl/TclTK/lib
  set ROOTDIR /home2/isl
 
  global tk_version

set DefaultDir $ROOTDIR/plc

global filename

frame .mb 
menubutton .mb.button1 -text "File" -relief raised -menu .mb.button1.m 
menubutton .mb.button2 -text "Edit" -relief raised -menu .mb.button2.m

pack .mb.button1 .mb.button2 -side left -padx 2m -fill x -expand yes

menu .mb.button1.m 
menu .mb.button2.m

.mb.button1.m add command -label "New..." -command {NewFile} 
.mb.button1.m add command -label "Load ..." -command {LoadFile} 
.mb.button1.m add command -label "Append..." -command {AppendFile} 
.mb.button1.m add command -label "Save" -command {SaveFile} 
.mb.button1.m add command -label "Save As..." -command {SaveAsFile} 
.mb.button1.m add command -label "Quit" -command {QuitFile}

.mb.button2.m add command -label "Clear" -command {ClearEdit}

#set up a frame for text edit 
frame .te -relief raised -borderwidth 2

#Shows how to control text widget scrolling using 
#a scrollbar

#set geometry to give a reasonable window size 
. configure
# -geometry 80x30

#First set up scrollbar 
scrollbar .te.vscroll -relief sunken -command ".te.edit1 yview"

#Set up a text widget and link scroll 
text .te.edit1 -yscroll ".te.vscroll set"

#Pack editing components

pack .te.vscroll -side right -fill y 
pack .te.edit1 -expand yes -fill y

#Now pack everything together 
pack .mb .te -pady 2m -fill x


proc NewFile {} {
   global filename
    #Could have anguish here - should we prompt
    #the user for confirmation?
    #Should we check to see if text exists in window?
    #Should we check to see if file has changed?
    #Should we check to see if file has been saved?

    #Brutal implementation! 
    fileselection_dialog { $DefaultDir }
    #.te.edit1 delete 1.0 end 
    #set filename "New" 
    #wm title . "EDIT: $filename" 
}

proc LoadFile {} {
   global filename
    #First get text from file
    set fn [exec "getfilename.tcl"]
#    set fn $filename
    set f [open $fn r]
    set x [read $f]
    #Clear the window!
    ClearEdit
    #Insert the new text
    .te.edit1 insert 1.0 $x
    set t [close $f]
    #Set global filename
    set filename $fn
    wm title . "EDIT : $filename"
    }


proc AppendFile {} {
    global filename x
    #First get text from file
#    set fn [exec "getfilename.tcl"]
    set fn filename
    set f [open $fn r]
    set x [read $f]
       #Append file at end of text
    .te.edit1 insert end $x
       #Close source file
    set t [close $f]
}

proc SaveFile {} {
   global filename x

    puts "saving $filename"
    
    set f [open $filename w]
       #Get text to save
    set x [.te.edit1 get 1.0 end]
       #Save it
    puts "What!!! $filename, $x, $f"
       #and close file
    set t [close $f]
    }

proc SaveAsFile {} {
   global filename
       #Get file name to save
#    set fn [exec "getfilename.tcl"]
    set fn filename
    set f [open $fn w]
       #Get text to save
    set x [.te.edit1 get 1.0 end]
       #Save it
    puts $f $x
       #and close file
    set t [close $f]
    #Set global filename
    set filename $fn
   wm title . "EDIT : $filename"
    }


proc QuitFile {} {
    #Could have anguish here - should we prompt
    #the user for confirmation?
    #Should we check to see if file has changed?
    #Should we check to see if file has been saved?

#This implementation is brutal! 
destroy . 
}

#The ClearEdit procedure is used to clear the text widget - again with no prompting.

proc ClearEdit {} {
    #Could have anguish here - should we prompt
    #the user for confirmation?
    #Should we check to see if file has changed?
    #Should we check to see if file has been saved?

.te.edit1 delete 1.0 end 
}
# This file defines the procedure tk_dialog, which creates a dialog
# box containing a bitmap, a message, and one or more buttons.
#
# $Header: /user6/ouster/wish/library/RCS/dialog.tcl,v 1.4 93/08/16 16:59:52 ouster Exp $ SPRITE (Berkeley)
#
# Copyright (c) 1992-1993 The Regents of the University of California.
# All.vpeople.rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above cop.vpeople.right notice and the following two paragraphs appear in
# all copies of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
# OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
# CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
# ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
# PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
#

#
# tk_dialog:
#
# This procedure displays a dialog box, waits for a button in the dialog
# to be invoked, then returns the index of the selected button.
#
# Arguments:
# w -           Window to use for dialog top-level.
# title -       Title to display in dialog's decorative frame.
# text -        Message to display in dialog.
# bitmap -      Bitmap to display in dialog (empty string means none).
# default -     Index of button that is to display the default ring
#               (-1 means none).
# args -        One or more strings to display in buttons across the
#               bottom of the dialog box.

proc tk_dialog {w title text bitmap default args} {
    global tk_priv bfont

    set ICONDIR /home2/isl/TclTK/images
    # 1. Create the top-level window and divide it into top
    # and bottom parts.

    catch {destroy $w}
    toplevel $w -class Dialog
    wm title $w $title
    wm iconbitmap $w @$ICONDIR/vlb.icon
    wm iconname $w {VLBIIE}

    frame $w.top -relief raised -bd 1 -bg blue
    pack $w.top -side top -fill both
    frame $w.bot -relief raised -bd 1 -bg blue
    pack $w.bot -side bottom -fill both

    # 2. Fill the top part with bitmap and message.

#    message $w.msg -width 8i -text $text -font $bfont
    message $w.msg -width 8i -text $text
    pack $w.msg -in $w.top -side right -expand 1 -fill both -padx 5m -pady 5m
    if {$bitmap != ""} {
        label $w.bitmap -bitmap $bitmap
        pack $w.bitmap -in $w.top -side left -padx 5m -pady 5m
    }

    # 3. Create a row of buttons at the bottom of the dialog.

    set i 0
    foreach but $args {
        button $w.button$i -text $but -command "set tk_priv(button) $i"
        if {$i == $default} {
            frame $w.default -relief sunken -bd 1 -bg blue
            raise $w.button$i $w.default
            pack $w.default -in $w.bot -side left -expand 1 -padx 3m -pady 2m
            pack $w.button$i -in $w.default -padx 2m -pady 2m \
                    -ipadx 2m -ipady 1m
            bind $w <Return> "$w.button$i flash; set tk_priv(button) $i"
        } else {
            pack $w.button$i -in $w.bot -side left -expand 1 \
                    -padx 3m -pady 3m -ipadx 2m -ipady 1m 
        }
        incr i
    }

    # 4. Withdraw the window, then update all the geometry information
    # so we know how big it wants to be, then center the window in the
    # display and de-iconify it.

    wm withdraw $w
    update idletasks
    set x [expr [winfo screenwidth $w]/2 - [winfo reqwidth $w]/2 \
            - [winfo vrootx [winfo parent $w]]]
    set y [expr [winfo screenheight $w]/2 - [winfo reqheight $w]/2 \
            - [winfo vrooty [winfo parent $w]]]
    wm geom $w +$x+$y
    wm deiconify $w

    # 5. Set a grab and claim the focus too.

#    set oldFocus [focus]
#    grab $w
#    focus $w

    # 6. Wait for the user to respond, then restore the focus and
    # return the index of the selected button.

    tkwait variable tk_priv(button)
    destroy $w
#    focus $oldFocus
    return $tk_priv(button)
}

# ==========================================================================
#
#                         FILESELECTION SECTION
#
# ==========================================================================
proc fileselection_dialog {directory} {
 
 global global_startmode filename 

 set types {
  {{Files} {*.*} }
 }
#{{All Files}{*}}

 set filename [tk_getOpenFile  -title "Open new log file" -filetypes $types -initialdir $directory]

 if {$filename != ""} {
     .te.edit1 delete 1.0 end 
#     LoadFile $filename
     LoadFile
 }

}
