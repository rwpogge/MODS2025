/*!
  \mainpage bfilter.plc - bfilter PLC code

  \author R Gonzalez (OSU)
 
  \date 2007 March 02
  
  \section Usage
  
  Usage: Multi-level command set
  
  Where: \c MODS instrument
  
  \section Introduction

 The MODS Filter Wheel places one of eight possible filters into the MODS
 science camera beam directly in front of the Field Flattener & CCD.
 The rectangular filters are mounted in cells with RTV.  The filter cells are
 loaded into the filter wheel radially and are prevented from being inserted
 the wrong way by asymmetric guide rails.  The filter cells are temporarily
 held in place with spring loaded ball detents and then locked in place with
 mounting cleats (requires 2.5mm hex wrench).

<pre>
2007 Mar 02 - new application [mad]
2007 Mar 02 - added header [rdg]
2017 Jan 23 - new ACCL, DECL, & VM after MODS1 RFILTER pinion failure [rwp]
</pre>

\todo

<ul>
</ul>
*/

/*!
  \file bfilter.plc
  \brief Position the desired filter for the BLUE Camera.
*/
/** END HEADER - This statement must be here. DO NOT remove **/
* Start here with filterWheel PLC code
' Motion Parameters
Drven=0       'Disable Motor Until User Inputs New Target Filter
Msel= 10      '10 microsteps per step
Munit=2000    'units to revs
Mac=60        'accel current is 0.60 * 7
Mrc=35        'run current is 0.35 * 7
Mhc=0         'hold current is zero
Hcdt=0        'hold current delay msec
      'Input & Output Configuration
Ios 21 = 0,0,1     'LSB, Active High
Ios 22 = 0,0,1
Ios 23 = 0,0,1	   'MSB, Active High
Ios 24 = 0,0,1	   'In Position, Active High
      'Motion Configuration
Accl=6	      'Acceleration rate in rev/sec^2 (was 30 pre-2017)
Decl=6	      'Deceleration rate in rev/sec^2 (was 20 pre-2017)
Vm=3.5	      'Move Velocity in rev/sec (was 10 pre-2017)

      'Variable Declarations
VAR LIFETEST=44		  'ENTERS INCREMENTAL MOTION TEST CYCLE WHEN SET TO 66
VAR CYCTOTAL=4		  'REQUESTED # OF LIFE CYCLE LOOPS BY USER
VAR CYCCOUNT = 0          'COUNTER FOR LIFE CYCLE LOOPS
VAR MOVEINC = 0	          'COUNTER FOR INCREMENTAL MOVES
VAR NUMPOS=8              'Number of Filter Positions in the Filter Wheel
VAR MIDPOS=NUMPOS/2	  'Midpoint of Filter Wheel		
VAR MAXPOS=NUMPOS-1	  'Highest Value of Filter that can be requested
VAR DIST = 2.5625         'Motor revs between Filter positions
VAR TARGNUM	          'Target Filter Number
VAR TARGMOV		  'Target Filter Move Requirement
VAR TARGABS		  'Absolute Value of Target Filter Move
VAR CELLMOVE		  'Number of Filter Cell Positions Required to 
			  'Move from Current Filter to Target Filter
VAR BITFNUM               'Bit 24,23,22,21
' filter NUMBER 1000=0,1010=2,1011=3,1100=4,1101=5,1110=6,1111=7
' Bit 24 is the in position bit.
' Filter is offset by 1.
' example: bitmask=2,filter=1 or bitmask=3, filter=2 ... etc 
'
VAR A = Io 21		  'One's	
VAR B = Io 22 * 2	  'Two's
VAR C = Io 23 * 4	  'Four's
VAR A1 = Io 21		  'One's (Read after move complete)	
VAR B1 = Io 22 * 2	  'Two's (Read after move complete)
VAR C1 = Io 23 * 4	  'Four's (Read after move complete)
VAR FILTNUM = A + B + C   'The Current Filter Position as Determined by the 
'			  'Code Bit Arithmetic
VAR NEWPOS = A1 + B1 + C1 'The New Filter Position as Determineed by the 
			  'Code Bit Arithmetic (Re-Reads VAR A,B,C after 
			  'move to target)
VAR error1 = 0		  'Incremented Counter Variable used for Timeout Loop
VAR RECOV99		  'When = 99 Re-Initialization is attempted
'Pfmt=3,0,2   	'Prints to screen with 3 places before decimal, 0 places after 
		'decimal, and no padding

VAR PWRFAIL=1		'Power Failure variable

Pgm 100       'program starts at address 100
'     'STARTUP MODE
'	'Initialization
LBL INITIAL
'TARGNUM=0
PWRFAIL=0

LBL BEGIN

BR PWRERR, PWRFAIL=1
BR NOPOS, Io 24 = 0	'Check for In Position Condition, 
			'If False Branch to No Position Error
			'Check Current Filter Position
NUMPOS = 8
MIDPOS = NUMPOS/2
MAXPOS = NUMPOS-1	
A = Io 21
B = Io 22 * 2
C = Io 23 * 4
FILTNUM = A + B + C
'IF Target Filter is the same as the Current 
BR LOGCUR, TARGNUM=FILTNUM
'INPUT1 TARGNUM,0
'INPUT TARGNUM,1
'BR INCTEST, LIFETEST = 66 'Branches to Life Cycle Testing if equal to 66
TARGMOV = FILTNUM - TARGNUM     'Determines the differnce between the Current 
				'Filter Postion & the Target Filter Position
TARGABS = ABS TARGMOV
       'Check User Input for Valid Entry
BR VALPOS, TARGNUM>MAXPOS       'Target Filter must be less than MAXPOS, 
				'Otherwise Branch to VALPOS
BR VALPOS, TARGNUM<0            'Target Filter must be greater than 0, 
				'Otherwise Branch to VALPOS
BR NOMOVE, TARGNUM=FILTNUM	'IF Target Filter is the same as the Current 
				;Filter, Branch to NOMOVE
	'Determine Minimum Filter Wheel Movement Requirements
BR COND_A, TARGABS>=MIDPOS
BR COND_B, TARGABS<MIDPOS

	'(Condition A Met) Check to see if Target Filter is CW or CCW 
	'from Current Filter
LBL COND_A
BR COND1, FILTNUM>TARGNUM
BR COND3, FILTNUM<TARGNUM
'BR BEGIN
BR ENDIT
	'(Condition B Met) Check to see if Target Filter is CW or CCW 
	'from Current Filter
LBL COND_B
BR COND2, FILTNUM>TARGNUM
BR COND4, FILTNUM<TARGNUM
'BR BEGIN
BR ENDIT
	'Calculate Most Efficient Move to Target Filter
LBL COND1 	'Use when move to Target Filter >= (Number of Positions / 2), 
		'& (Current Filter # > Target #)
CELLMOVE = NUMPOS-TARGABS
BR MOVEDISK
LBL COND2			'Use when move to 
				'Target Filter < (Number of Positions / 2), & 
				'(Current Filter # > Target #)
CELLMOVE = -TARGABS
BR MOVEDISK
'
LBL COND3 			'Use when move to 
				'Target Filter >= (Number of Positions / 2), & 
				'(Current Filter # < Target #)
CELLMOVE = TARGABS-NUMPOS
BR MOVEDISK
'
LBL COND4			'Use when move to 
				'Target Filter < (Number of Positions / 2), & 
				'(Current Filter # < Target #)
CELLMOVE = TARGABS
BR MOVEDISK			
BR ENDIT     'If no condition met, branch to ENDIT
'
LBL MOVEDISK
Drven=1				'Enables to Drive		
MOVEINC=0			'sets Incremental Move Counter to Zero
BR POSMOVE, CELLMOVE>0		'Used for Positive Direction Motion
BR NOMOVE, CELLMOVE=0		'Used when no move is required
BR NEGMOVE, CELLMOVE<0		'Used for Negative Direction Motion
'
LBL POSMOVE			'Positive Motion Loop
MOVR=DIST
HOLD 2				'Waits until Motion ends before executing 
				'next command
DELAY 250			'Adds delay in program execution in 
				'milliseconds
INC MOVEINC			'Increments Counter Variable
BR CONFIRM, MOVEINC=CELLMOVE	'Branches when Move Counter equals 
				'Move Requirement
BR POSMOVE
'
LBL NEGMOVE			'Negative Motion Loop
MOVR=-DIST
HOLD 2
DELAY 250
DEC MOVEINC			'Decrements Counter Variable
BR CONFIRM, MOVEINC=CELLMOVE
BR NEGMOVE
'
LBL CONFIRM			'Re-Reads Code Bits in order to 
				'Confirm Position
A1 = Io 21
B1 = Io 22 * 2
C1 = Io 23 * 4
NEWPOS = A1 + B1 + C1
BR ENDIT, NEWPOS=TARGNUM	'Confirms that the New Filter Wheel Position 
'BR BEGIN, NEWPOS=TARGNUM	'Confirms that the New Filter Wheel Position 
				'matches the Target Position once motion stops
'PRINT "? Blue WRONG POSITION?, SENSORS INDICATE POSITION #" NEWPOS
	'Optional Re-Initialize to correct Wrong Position
'PRINT "\nENTER 99 TO TRY TO RE-INITIALIZE, ENTER 55 TO QUIT\n"
	'Checks for User Input
'INPUT RECOV99							
	'Branch to beginning if Re-Initialization (99) is entered by user
'BR BEGIN, RECOV99 = 99						
'BR CMDIN, RECOV99 = 99						
BR ENDIT 	'If any number other than 99 is entered by user the 
		'program branches to ENDIT
	'Recover from an Out of Position Error
LBL NOPOS
Drven=1		'Enables the Drive		
PRINT "? FAULT FILTER WHEEL NOT IN VALID POSITION, PLEASE WAIT RECOVERING"
SLEW 0.25		'Slews while waiting for In Position Bit to be 
			'activated
BR TIMEOUT
'
LBL TIMEOUT		'Loop that can be used as a timer for error recovery
DELAY 250		'Delay time in milliseconds
BR FAILED,error1>80	'Sets the maximum number of cycles before timeout 
			'error occurs
BR STOP_IT, Io 24 =1	'Looks for In Position Bit to be activated
INC error1		'Increments counter variable
BR timeout		'Closes Timeout Loop
'
LBL STOP_IT
SSTP 0			'Soft Stop: Option 0 stops motion only, program 
			'continues to execute
'BR BEGIN
BR ENDIT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'               PWRERRor(Power Failure error) PROCEDURE
' I'm indicating a power failure
'
LBL PWRERR
  PRINT "? PWRFLR power failure,re-cycled or turned off (reset)"
BR ENDIT
'
LBL FAILED		'Recovery Timeout Message Followed by End of Program
'PRINT "? Blue RECOVERY FAILED\n"
BR ENDIT
'
LBL VALPOS		'Invalid Position Message Followed by 
'			'End of Program		
'PRINT "Blue INVALID POSITION REQUESTED"
'BR BEGIN
BR ENDIT
'
LBL NOMOVE		'Alerts User that they've selected a 
			'Filter that's already in use
BR LOGINU, TARGNUM=FILTNUM
PRINT "? ",FILTNUM," ALREADY USING FILTER"
'BR BEGIN
BR ENDIT
'
LBL INCTEST    'INCREMENTAL MOTION CYCLE TEST ROUTINE
A = Io 21
B = Io 22 * 2
C = Io 23 * 4
FILTNUM = A + B + C   'CHECKS POSITION PRIOR TO STARTING LIFE CYCLE TEST
'PRINT "Blue BEGIN INCREMENTAL MOTION LIFE CYCLE TEST"
'PRINT "THE TEST IS STARTING AT POSITION # " FILTNUM
'PRINT "HOW MANY COMPLETE LIFECYCLE LOOPS TO DO?"
'INPUT CYCTOTAL
Drven=1
Pos = 0     'SETS CURRENT POSITION TO ZERO
'
LBL INCSTART		'Incremental Motion Cycle Test Loop
MOVEINC=0
INC CYCCOUNT
BR FINALCHK, CYCCOUNT > CYCTOTAL
'PRINT "Blue STARTING LIFECYCLE LOOP # " CYCCOUNT
'
LBL POSTEST		'Positve Direction Test Loop
MOVR=DIST
HOLD 2
DELAY 250
INC MOVEINC
BR POSTEST, MOVEINC<9	'Loops for 9 Cycles
MOVEINC=0		'Resets Counter Variable
'
LBL NEGTEST		'Negative Direction Test Loop
MOVR=-DIST
HOLD 2
DELAY 250
INC MOVEINC
BR NEGTEST, MOVEINC<9
MOVEINC=0
BR INCSTART
'
LBL FINALCHK		'Checks IO and Gives Life Cycle Test Results
A1 = Io 21
B1 = Io 22 * 2
C1 = Io 23 * 4
NEWPOS = A1 + B1 + C1
'PRINT "Blue THE LIFE CYCLE TEST IS DONE"
'PRINT "THE TEST STARTED AT POSITION # " FILTNUM
'PRINT "THE TEST ENDED AT POSITION # " NEWPOS
BR BADTEST, FILTNUM<>NEWPOS
'PRINT "THE TEST WAS SUCCESSFUL\n"
BR ENDIT
'
LBL BADTEST		'Error Message for Failed Life Cycle Test
'PRINT "Blue START POSITION DOES NOT MATCH THE FINISH POSITION\n"
'PRINT "THIS INDICATES A STALL OCCURRED DURING THE TEST\n"
BR ENDIT
*
LBL LOGCUR
PRINT "? ",FILTNUM," Current Filter"
'BR BEGIN
BR ENDIT
'
LBL LOGINU
PRINT "BLUE YOU ARE ALREADY USING FILTER #",FILTNUM
'BR BEGIN
BR ENDIT
'
'	END OF PLC
LBL ENDIT		
SSTP 1 			'Stops the Motion and the Program Execution
BR END_IT
'
'                       WHO AM I PROCEDURE
LBL WHO
PRINT "bfilter"
BR END_IT
'
'                       POLL THE CONTROLLER AM I PROCEDURE
LBL POLL
'PRINT "BLUE FILTER#=",FILTNUM,",BITS26-21=,IO 26,IO 25,IO 24,IO 23,IO 22,IO 21
BR END_IT       'branch to exit
'
'                       CODE VERSION PROCEDURE
LBL CODEV
PRINT "Blue codeV=0.1(05/20/07)",":HW",VER
BR END_IT       'branch to exit
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                IO20MASK PROCEDURE
' Check the Select, Insert bit mask 24-21
'
LBL IO20MASK
  VAR B21=IO 21*8 
  VAR B22=IO 22*4 
  VAR B23=IO 23*2 
  VAR B24=IO 24
  VAR BITMASK=B21+B22+B23+B24
  PRINT BITMASK
BR END_IT
'
LBL END_IT              'End Program Execution
BR NOTONE, TARGNUM<>1
POS=0.0
LBL NOTONE
END
PGM
