/*!
  \mainpage agwfilt.plc - AGW Filter Wheel PLC program

  \author Staff, OSU Dept. of Astronomy (rgonzale@astronomy.ohio-state.edu)
 
  \date 2006 Jul 20
  
  \section Usage
  
  Usage: Multi-level command set used with ISL system
	 or Window IMS system
  
  Where: \c MODS instrument
  
  \section Introduction
	Small command set the key words are -
	initial: Initialize AGW Filter Wheel (move to CW or CCW and set 
					     pos=0.000)
	home: Send to position 0.000
	stow: Send to oposite of home.
	stop: Stop all mechanism movement
	Subroutines:
		relbrk: Release break
		setbrk: Set break

	All Motion Parameters are documented in the MicroLYNX Part III 
	Software Reference.

<pre>
2006 Jul 20 - new application [rdg]
2007 Aug 17 - added PLC code [mad/rdg]
</pre>

\todo

<ul>
</ul>
*/
/*!
  \file agwfilt.plc
  \brief Small command set for AGW Filter Wheel mechanism
*/
/** END HEADER **/
' START loading PLC
'
'Motion Parameters
Drven=0       'Disable Motor Until User Inputs New Target Filter
Msel= 10      '10 microsteps per step
Munit=2000    'units to revs
Mac=20        'accel current is 0.20 * 7
Mrc=15        'run current is 0.15 * 7
Mhc=0         'hold current is zero
Hcdt=0        'hold current delay msec
'
      'Input & Output Configuration
Ios 21 = 0,0,0     'LSB, Active Low
Ios 22 = 0,0,0	   'MSB, Active Low	
Ios 24 = 0,0,0	   'In Position, Active Low
'
' Motion Configuration
Accl=30         'Acceleration rate in rev/sec^2
Decl=15		'Deceleration rate in rev/sec^2
Vm=2		'Move Velocity in rev/sec
'
' User Variable Declarations
VAR LIFETEST	     'ENTERS INCREMENTAL MOTION TEST CYCLE WHEN SET TO 66
VAR CYCTOTAL         'REQUESTED # OF LIFE CYCLE LOOPS BY USER
VAR CYCCOUNT = 0     'COUNTER FOR LIFE CYCLE LOOPS
VAR MOVEINC = 0	     'COUNTER FOR INCREMENTAL MOVES
VAR NUMPOS=4         'Number of Filter Positions in the Filter Wheel
VAR MIDPOS=NUMPOS/2  'Midpoint of Filter Wheel		
VAR MAXPOS=NUMPOS-1  'Highest Value of Filter that can be requested
VAR DIST = 2.4       'Motor revs between Filter positions
VAR TARGNUM	     'Target Filter Number
VAR TARGMOV          'Target Filter Move Requirement
VAR TARGABS          'Absolute Value of Target Filter Move
VAR CELLMOVE         '# Filter Pos Reqd to Move from Current to Target Filter
VAR A = Io 21        'One's	
VAR B = Io 22 * 2    'Two's
VAR A1 = Io 21       'One's (Read after move complete)	
VAR B1 = Io 22 * 2   'Two's (Read after move complete)
VAR FILTNUM = A + B  'Current Filter Pos, Determined by Code Bit Arithmetic
VAR NEWPOS = A1 + B1 'New Filter Pos, Determineed by Code Bit Arithmetic
VAR error1 = 0       'Incremented Counter Variable used for Timeout Loop
VAR RECOV99          'When = 99 Re-Initialization is attempted
'Prints with 3 places before decimal,0 places after decimal,no padding
'Pfmt=3,0,2

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'	        STARTUP MODE
' PLC starts at address #100
'
Pgm 100       'program starts at address 100
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		BEGIN PROCEDURE
' Act on the target number selected
'
LBL INITIAL
  TARGNUM=1
  PWRFAIL=0		'Reset Power Failure variable
LBL BEGIN
  BR PWRERR, PWRFAIL=1          'Check for Power Failure or was turned off/on
'
  BR INCTEST, LIFETEST = 66 'rdg:Branches to Life Cycle Testing if equal to 66
'Check In Position Cond,If False Branch to No Position Error
  BR NOPOS, Io 24 = 0
'
'Check Current Filter Position
  NUMPOS = 4
  MIDPOS = NUMPOS/2
  MAXPOS = NUMPOS-1	
  A = Io 21
  B = Io 22 * 2
  FILTNUM = A + B
'
  TARGMOV = FILTNUM - TARGNUM 	'Differnce between the Current Pos & Target Pos
  TARGABS = abs TARGMOV
'
'Check User Input for Valid Entry
  BR VALPOS, TARGNUM>MAXPOS  	'Target must be less than MAXPOS
  BR VALPOS, TARGNUM<0       	'Target must be greater than 0
  BR NOMOVE, TARGNUM=FILTNUM 	'IF Target is same as Current Filter,
				' Branch NOMOVE
'
'Determine Minimum Filter Wheel Movement Requirements
  BR COND_A, TARGABS>=MIDPOS
  BR COND_B, TARGABS<MIDPOS
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		COND_A PROCEDURE
' (Condition A Met) Check to see if Target is CW or CCW from Current Filter
'
LBL COND_A
'
  BR cond1, FILTNUM>TARGNUM
  BR cond3, FILTNUM<TARGNUM
BR END_IT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		COND_B PROCEDURE
' (Condition B Met) Check to see if Target is CW or CCW from Current Filter
'
LBL COND_B
'
  BR cond2, FILTNUM>TARGNUM
  BR cond4, FILTNUM<TARGNUM
BR END_IT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		COND1 PROCEDURE
' Calculate Most Efficient Move to Target Filter
' Target >= (Number of Positions / 2), & (Current Filter # > Target #)
'
LBL COND1
  CELLMOVE = NUMPOS-TARGABS
BR MOVEDISK
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		COND2 PROCEDURE
' Target < (Number of Positions / 2), & (Current Filter # > Target #)
'
LBL COND2
  CELLMOVE = -TARGABS
BR MOVEDISK
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		COND3 PROCEDURE
' Target >= (Number of Positions / 2), & (Current Filter # < Target #)
'
LBL COND3
  CELLMOVE = TARGABS-NUMPOS
BR MOVEDISK
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		COND4 PROCEDURE
' Target < (Number of Positions / 2), & (Current Filter # < Target #)
'
LBL COND4
  CELLMOVE = TARGABS
BR MOVEDISK			
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		MOVEDISK PROCEDURE
'
LBL MOVEDISK
  Drven=1       'Enables to Drive		
  MOVEINC=0     'sets Incremental Move Counter to Zero
  BR POSMOVE, CELLMOVE>0  'Used for Positive Direction Motion
  BR NOMOVE, CELLMOVE=0   'Used when no move is required
BR NEGMOVE, CELLMOVE<0  'Used for Negative Direction Motion

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		POSMOVE PROCEDURE
' Positive Motion Loop
'
LBL POSMOVE
  MOVR=DIST
   HOLD 2      	'Waits until Motion ends before exec next command
    DELAY 250   'Adds delay in program execution in milliseconds
  INC MOVEINC 	'Increments Counter Variable
'
  BR CONFIRM, MOVEINC=CELLMOVE 'Move Counter = Move Requirement
BR POSMOVE

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		NEGMOVE PROCEDURE
' Negative Motion Loop
'
LBL NEGMOVE
  MOVR=-DIST
  HOLD 2
   DELAY 250
    DEC MOVEINC   'Decrements Counter Variable
  BR CONFIRM, MOVEINC=CELLMOVE
BR NEGMOVE

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		CONFIRM PROCEDURE
' Re-Reads Code Bits in order to Confirm Position
'
LBL CONFIRM
  A1 = Io 21
  B1 = Io 22 * 2
  NEWPOS = A1 + B1
  BR END_IT, NEWPOS=TARGNUM 'Confirms New Filter Wheel Pos matches Target Pos
'
'Branch to beginning if Re-Initialization (99) is entered
  RECOV99=99
BR BEGIN
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		NOPOS PROCEDURE
' Recover from an Out of Position Error
'
LBL NOPOS
  Drven=1		'Enables the Drive
  PRINT "1 ERROR:FILTER WHEEL NOT IN A VALID POSITION,PLEASE WAIT FOR RECOVERY"
  SLEW 0.25   'Slews while waiting for In Position Bit to be activated
BR TIMEOUT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'               PWRERR(power failure error) PROCEDURE
' I'm indicating a power failure
'
LBL PWRERR
  PRINT "1 AGW Filter power failure or turned off (reset), AGWFILT=PWRFLR"
BR END_IT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		TIMEOUT PROCEDURE
' Loop that can be used as a timer for error recovery
'
LBL TIMEOUT
  DELAY 250   'Delay time in milliseconds
  BR FAILED,error1>80  'Sets the max # of cycles before timeout error occurs
  BR STOP_IT, Io 24 =1 'Looks for In Position Bit to be activated
  INC error1  'Increments counter variable
BR timeout  'Closes Timeout Loop
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		STOP_IT PROCEDURE
' Soft Stop: 0 stops motion only, program cont execution
'
LBL STOP_IT
  SSTP 0
BR END_IT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		FAILED PROCEDURE
' Recovery Timeout Message Followed by End of Program
'
LBL FAILED
  PRINT "1 RECOVERY FAILED"
BR END_IT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		VALPOS PROCEDURE
' Invalid Position Message Followed by End of Program
'
LBL VALPOS
  PRINT "3 INVALID POSITION REQUESTED"
BR END_IT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		NOMOVE PROCEDURE
' Alerts User they've selected a Filter that's already in use
'
LBL NOMOVE 
  PRINT "3 YOU ARE ALREADY USING FILTER #" FILTNUM
BR END_IT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		INCTEST PROCEDURE
'INCREMENTAL MOTION CYCLE TEST ROUTINE
'
LBL INCTEST 'INCREMENTAL MOTION CYCLE TEST ROUTINE
  LIFETEST=99
  A = Io 21
  B = Io 22 * 2
  FILTNUM = A + B 'CHECKS POSITION PRIOR TO STARTING LIFE CYCLE TEST
'
  PRINT "0 THE TEST IS STARTING AT POSITION # " FILTNUM
  Drven=1
  Pos = 0  'SETS CURRENT POSITION TO ZERO
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		INCSTART PROCEDURE
'Incremental Motion Cycle Test Loop
'
LBL INCSTART  'Incremental Motion Cycle Test Loop
  CYCTOTAL=5
  MOVEINC=0
  INC CYCCOUNT
BR FINALCHK, CYCCOUNT > CYCTOTAL
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		POSTEST PROCEDURE
' Positive Direction Test Loop
'
LBL POSTEST
  MOVR=DIST
   HOLD 2
    DELAY 250
  INC MOVEINC
  BR POSTEST, MOVEINC<5  'Loops for 9 Cycles
  MOVEINC=0              'Resets Counter Variable
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		NEGTEST PROCEDURE
' Negative Direction Test Loop
'
LBL NEGTEST            'Negative Direction Test Loop
  MOVR=-DIST
   HOLD 2
    DELAY 250
  INC MOVEINC
  BR NEGTEST, MOVEINC<5
  MOVEINC=0
BR INCSTART
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		FINALCHK PROCEDURE
'Checks IO and Gives Life Cycle Test Results
'
LBL FINALCHK           'Checks IO and Gives Life Cycle Test Results
  A1 = Io 21
  B1 = Io 22 * 2
  NEWPOS = A1 + B1
'
  BR BADTEST, FILTNUM<>NEWPOS
  PRINT "0 THE TEST WAS SUCCESSFUL"
'
  LIFETEST=44  'Reset lifetest
  CYCCOUNT=0   'Reset Count
BR END_IT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		BADTEST PROCEDURE
' Error Message for Failed Life Cycle Test
'
LBL BADTEST
  PRINT "1 THE START POSITION DOES NOT MATCH THE FINISH POSITION"
BR END_IT
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		END_IT PROCEDURE
' End of the line
'
LBL END_IT       'Exit
  BR NOTONE, FILTNUM<>1
  POS=0.0
'
LBL NOTONE
  PRINT "0 FILTER=",FILTNUM
END              'end the procedures
PGM              'end of program in RAM 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''' NEW PLC PGM STARTED '''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		ISL PLC General PROCEDURES
'
PGM 6000

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                WHO AM I PROCEDURE
'
LBL WHO
  PRINT "0 agwfilt"
BR END_PLC

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                CHKPOS PROCEDURE check position
'
LBL CHKPOS
  PRINT "0 ",POS
BR END_PLC       'branch to exit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                CHKMVG PROCEDURE check moving status
'
LBL CHKMVG
  PRINT "0 ",MVG
BR END_PLC       'branch to exit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                POLL THE CONTROLLER PROCEDURE
'
LBL POLL
  PRINT "0 POS=",POS," : BITS26-21=",IO 26,IO 25,IO 24,IO 23,IO 22,IO 21
BR END_PLC       'branch to exit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                CODE VERSION PROCEDURE
'
LBL CODEV
  PRINT "0 codeV=0.1(09/12/07)",":HW",VER
BR END_PLC      'branch to exit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                IO20 PROCEDURE for bits 26 - 21
' Check IO 20 bits
'
LBL IO20
  PRINT "0 ",IO 26,IO 25,IO 24,IO 23,IO 22,IO 21
BR END_PLC       'branch to exit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                IO30 PROCEDURE for bits 36 - 31
' Check IO 30 bits
'
LBL IO30
  PRINT "0 ,"IO 36,IO 35,IO 34,IO 33,IO 32,IO 31
BR END_PLC       'branch to exit
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                IO20MASK PROCEDURE
' Check the Select, Insert bit mask 24-21
'
LBL IO20MASK
  VAR B21=IO 21*8 
  VAR B22=IO 22*4 
  VAR B23=IO 23*2 
  VAR B24=IO 24
  VAR BITMASK=B21+B22+B23+B24
  PRINT "0 ",BITMASK
BR END_PLC
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		END_PLC PROCEDURE
' END of ISL PLC code
'
LBL END_PLC		
END 
PGM

