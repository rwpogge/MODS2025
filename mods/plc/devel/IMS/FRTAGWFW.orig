Pgm 100       'program starts at address 100

      'Motion Parameters
Drven=0       'Disable Motor Until User Inputs New Target Filter
Msel= 10      '10 microsteps per step
Munit=2000    'units to revs
Mac=30        'accel current is 0.60 * 7
Mrc=15        'run current is 0.35 * 7
Mhc=0         'hold current is zero
Hcdt=0        'hold current delay msec

      'Input & Output Configuration
Ios 21 = 0,0,0     'LSB, Active Low
Ios 22 = 0,0,0	   'MSB, Active Low
Ios 26 = 0,0,0	   'In Position, Active Low

      'Motion Configuration
Accl=30         'Acceleration rate in rev/sec^2
Decl=20		'Deceleration rate in rev/sec^2
Vm=10		'Move Velocity in rev/sec

      'Variable Declarations
VAR LIFETEST	          'ENTERS INCREMENTAL MOTION TEST CYCLE WHEN SET TO 66
VAR CYCTOTAL              'REQUESTED # OF LIFE CYCLE LOOPS BY USER
VAR CYCCOUNT = 0          'COUNTER FOR LIFE CYCLE LOOPS
VAR MOVEINC = 0	          'COUNTER FOR INCREMENTAL MOVES
VAR NUMPOS=4              'Number of Filter Positions in the Filter Wheel
VAR MIDPOS=NUMPOS/2	  'Midpoint of Filter Wheel		
VAR MAXPOS=NUMPOS-1	  'Highest Value of Filter that can be requested		
VAR DIST = 2.4         'Motor revs between Filter positions
VAR TARGNUM	          'Target Filter Number
VAR TARGMOV		  'Target Filter Move Requirement
VAR TARGABS		  'Absolute Value of Target Filter Move
VAR CELLMOVE		  'Number of Filter Cell Positions Required to Move from Current Filter to Target Filter
VAR A = Io 21		  'One's	
VAR B = Io 22 * 2	  'Two's
VAR A1 = Io 21		  'One's (Read after move complete)	
VAR B1 = Io 22 * 2	  'Two's (Read after move complete)
VAR FILTNUM = A + B       'The Current Filter Position as Determined by the Code Bit Arithmetic
VAR NEWPOS = A1 + B1      'The New Filter Position as Determineed by the Code Bit Arithmetic (Re-Reads VAR A,B,C after move to target)
VAR error1 = 0		  'Incremented Counter Variable used for Timeout Loop
VAR RECOV99		  'When = 99 Re-Initialization is attempted

Pfmt=3,0,2   'Prints to screen with 3 places before decimal, 0 places after decimal, and no padding

      'STARTUP MODE
PRINT " "
PRINT "ENTER 66 FOR Incremental Motion Life Cycle Test Mode"
PRINT "ENTER 44 FOR Normal Operation Mode"
INPUT LIFETEST		  'Looks for User Input for Mode Variable
BR INCTEST, LIFETEST = 66 'Branches to Life Cycle Testing if equal to 66

	'Initialization
LBL BEGIN
BR NOPOS, Io 26 = 0        'Check for In Position Condition, If False Branch to No Position Error
PRINT " "
PRINT "The Filter Wheel is in a VALID POSITION"

	'Check Current Filter Position
NUMPOS = 4
MIDPOS = NUMPOS/2
MAXPOS = NUMPOS-1	
A = Io 21
B = Io 22 * 2
FILTNUM = A + B

PRINT " "
PRINT "Current Filter # in Use = " FILTNUM
PRINT " "

        'User Request for New Filter Position
PRINT "Please Select Next Filter Position When Ready (0-3)"
PRINT " "
INPUT TARGNUM
TARGMOV = FILTNUM - TARGNUM      'Determines the differnce between the Current Filter Postion & the Target Filter Position
TARGABS = abs TARGMOV

        'Check User Input for Valid Entry
BR VALPOS, TARGNUM>MAXPOS       'Target Filter must be less than MAXPOS, Otherwise Branch to VALPOS
BR VALPOS, TARGNUM<0            'Target Filter must be greater than 0, Otherwise Branch to VALPOS
BR NOMOVE, TARGNUM=FILTNUM	'IF Target Filter is the same as the Current Filter, Branch to NOMOVE

	'Determine Minimum Filter Wheel Movement Requirements
BR COND_A, TARGABS>=MIDPOS
BR COND_B, TARGABS<MIDPOS

	'(Condition A Met) Check to see if Target Filter is CW or CCW from Current Filter
LBL COND_A
BR cond1, FILTNUM>TARGNUM
BR cond3, FILTNUM<TARGNUM
BR begin

	'(Condition B Met) Check to see if Target Filter is CW or CCW from Current Filter
LBL COND_B
BR cond2, FILTNUM>TARGNUM
BR cond4, FILTNUM<TARGNUM
BR begin

	'Calculate Most Efficient Move to Target Filter
LBL COND1			'Use when move to Target Filter >= (Number of Positions / 2), & (Current Filter # > Target #)
CELLMOVE = NUMPOS-TARGABS
PRINT "CONDITION 1 MET"
BR MOVEDISK
LBL COND2			'Use when move to Target Filter < (Number of Positions / 2), & (Current Filter # > Target #)
CELLMOVE = -TARGABS
PRINT "CONDITION 2 MET"
BR MOVEDISK
LBL COND3 			'Use when move to Target Filter >= (Number of Positions / 2), & (Current Filter # < Target #)
CELLMOVE = TARGABS-NUMPOS
PRINT "CONDITION 3 MET"
BR MOVEDISK
LBL COND4			'Use when move to Target Filter < (Number of Positions / 2), & (Current Filter # < Target #)
CELLMOVE = TARGABS
PRINT "CONDITION 4 MET"
BR MOVEDISK			
BR END_IT     'If no condition met, branch to END_IT

LBL MOVEDISK
Drven=1				'Enables to Drive		
MOVEINC=0			'sets Incremental Move Counter to Zero
BR POSMOVE, CELLMOVE>0		'Used for Positive Direction Motion
BR NOMOVE, CELLMOVE=0		'Used when no move is required
BR NEGMOVE, CELLMOVE<0		'Used for Negative Direction Motion

LBL POSMOVE			'Positive Motion Loop
MOVR=DIST
HOLD 2				'Waits until Motion ends before executing next command
DELAY 250			'Adds delay in program execution in milliseconds
INC MOVEINC			'Increments Counter Variable
BR CONFIRM, MOVEINC=CELLMOVE	'Branches when Move Counter equals Move Requirement
BR POSMOVE

LBL NEGMOVE			'Negative Motion Loop
MOVR=-DIST
HOLD 2
DELAY 250
DEC MOVEINC			'Decrements Counter Variable
BR CONFIRM, MOVEINC=CELLMOVE
BR NEGMOVE

LBL CONFIRM			'Re-Reads Code Bits in order to Confirm Position
A1 = Io 21
B1 = Io 22 * 2
NEWPOS = A1 + B1
BR BEGIN, NEWPOS=TARGNUM	'Confirms that the New Filter Wheel Position matches the Target Position once motion stops
PRINT " "
PRINT "WRONG POSITION?, SENSORS INDICATE POSITION #" NEWPOS	'If the New Position Doesn't Match the Target, PRINT WARNING MESSAGE
PRINT " "
PRINT "ENTER 99 TO TRY TO RE-INITIALIZE, ENTER 55 TO QUIT"	'Optional Re-Initialize to correct Wrong Position
PRINT " "
INPUT RECOV99							'Checks for User Input
BR BEGIN, RECOV99 = 99						'Branch to beginning if Re-Initialization (99) is entered by user
BR END_IT							'If any number other than 99 is entered by user the program branches to END_IT
	
	'Recover from an Out of Position Error
LBL NOPOS
Drven=1		'Enables the Drive		
PRINT " " 				
PRINT "ERROR: FILTER WHEEL IS NOT IN A VALID POSITION, PLEASE WAIT FOR RECOVERY"
PRINT " "
SLEW 0.25		'Slews while waiting for In Position Bit to be activated
BR TIMEOUT

LBL TIMEOUT		'Loop that can be used as a timer for error recovery
DELAY 250		'Delay time in milliseconds
BR FAILED,error1>80	'Sets the maximum number of cycles before timeout error occurs
BR STOP_IT, Io 26 =1	'Looks for In Position Bit to be activated
INC error1		'Increments counter variable
BR timeout		'Closes Timeout Loop

LBL STOP_IT
SSTP 0			'Soft Stop: Option 0 stops motion only, program continues to execute
BR BEGIN

LBL FAILED		'Recovery Timeout Message Followed by End of Program
PRINT " "
PRINT "RECOVERY FAILED"
PRINT " "
BR END_IT

LBL VALPOS		'Invalid Position Message Followed by End of Program		
PRINT " "
PRINT "INVALID POSITION REQUESTED"
PRINT " "
BR BEGIN

LBL NOMOVE		'Alerts User that they've selected a Filter that's already in use
PRINT " "
PRINT "YOU ARE ALREADY USING FILTER #" FILTNUM
PRINT " "
BR BEGIN

LBL INCTEST    'INCREMENTAL MOTION CYCLE TEST ROUTINE
A = Io 21
B = Io 22 * 2
FILTNUM = A + B   'CHECKS POSITION PRIOR TO STARTING LIFE CYCLE TEST
PRINT " "
PRINT "BEGIN INCREMENTAL MOTION LIFE CYCLE TEST"
PRINT " "
PRINT "THE TEST IS STARTING AT POSITION # " FILTNUM
PRINT " "
PRINT "HOW MANY COMPLETE LIFECYCLE LOOPS TO DO?"
INPUT CYCTOTAL
Drven=1
Pos = 0     'SETS CURRENT POSITION TO ZERO

LBL INCSTART		'Incremental Motion Cycle Test Loop
MOVEINC=0
INC CYCCOUNT
BR FINALCHK, CYCCOUNT > CYCTOTAL
PRINT " "
PRINT "STARTING LIFECYCLE LOOP # " CYCCOUNT

LBL POSTEST		'Positve Direction Test Loop
MOVR=DIST
HOLD 2
DELAY 250
INC MOVEINC
BR POSTEST, MOVEINC<5	'Loops for 5 Cycles
MOVEINC=0		'Resets Counter Variable

LBL NEGTEST		Negative Direction Test Loop
MOVR=-DIST
HOLD 2
DELAY 250
INC MOVEINC
BR NEGTEST, MOVEINC<5
MOVEINC=0

BR INCSTART

LBL FINALCHK		'Checks IO and Gives Life Cycle Test Results
A1 = Io 21
B1 = Io 22 * 2
NEWPOS = A1 + B1
PRINT "THE LIFE CYCLE TEST IS DONE"
PRINT " "
PRINT "THE TEST STARTED AT POSITION # " FILTNUM
PRINT " "
PRINT "THE TEST ENDED AT POSITION # " NEWPOS
PRINT " "
BR BADTEST, FILTNUM<>NEWPOS
PRINT "THE TEST WAS SUCCESSFUL"
BR END_IT

LBL BADTEST		'Error Message for Failed Life Cycle Test
PRINT " "
PRINT "THE START POSITION DOES NOT MATCH THE FINISH POSITION"
PRINT "THIS INDICATES A STALL OCCURRED DURING THE TEST"
BR END_IT

LBL END_IT		
PRINT " "
PRINT "END PROGRAM"
PRINT " "
SSTP 1 			'Stops the Motion and the Program Execution
END
Pgm
