# Help file for the MODS IIF interface.
#
Authorize	ClearStars	GetMODSdata	GetParameter
GetTCSdata	IIFClose	IIFInit		LogEvent
MaximizeWrapTime		MoveFocus	OffsetPointing
PresetTelescope	OffsetGuiding	Remove		RotReady
RotServicePosition		RotTrack	SendWavefront
SetDDLogging	SetHotspot	SetMODSData	SetParameter
SetReference	SetStars	SetTarget	StepFocus
TipTilt		UpdatePointingReference		UpdateTargetWavelength
help		list		proxy

/ENDLIST

int mods_IIFClose()
===================
Returns the status of the ICE IIF instance, as defined in 
  the Instrument ICD section 8.2.

  See Also: mods_IIFInit()
/ENDHELP


int mods_OpenIceComm(int argc, char *argv[])
============================================
OpenIceComm
============================================
Open IIF/ICE communications

  Return error or success

  Uses the error message(s) returned in the result structure describe in 
  the Instrument ICD Section 7.1
/ENDHELP

char *mods_error()
==================
Returns the most recent error message generated by a function call. 
If a function does not result in an error, this should return a blank 
(NULL) string.

Uses the error message(s) returned in the result structure describe in 
the Instrument ICD Section 7.1
/ENDHELP

int mods_IIFInit(char *proxyName, char *focalStation, char *instrID)
====================================================================
Initializes the ICE communicator and connect to the IIF server. 
Returns true if connection is successful, false on failure, 
with a diagnostic error message returned by the mods_error() method.

Valid values for instID and focStation are defined in the Instrument 
ICD Table 6.1.

We are free to define the proxyName as we need, but it must be stored and 
returned with the mods_proxy() method.

Example: IIFInit MODS1 directGregorian left MODS

See Also: mods_Authorize(), mods_error(), mods_proxy()
/ENDHELP

int mods_Authorize()
====================
Returns the authorization status of the ICE IIF instance, as defined in the
Instrument ICD section 8.2.

Example: Authorize

See Also: mods_IIFInit()
/ENDHELP

char *mods_proxy()
==================
Returns the proxy name used by this ICE IFF instance. 
Defined by a successful call to mods_IIFInit(), it should be set NULL 
if mods_IIFInit() failed to create an ICE IIF instance.

Example: proxy
   
See Also: IIFInit()
/ENDHELP

int mods_ClearStars()
=====================
Implements the ClearStars() function (Instrument ICD Section 8.5). 
If an error occurs, return false and set mods_error() with the error 
message(s) returned.

Example: ClearStars
/ENDHELP

int mods_LogEvent(char *eventName, char *eventDescription)
==========================================================
Implements the LogEvent() function (Instrument ICD Section 8.9), sending the
eventName and eventDescription strings given. If an error occurs, return 
false and set mods_error().

Example: LogEvent MODS1_Oops 'We have no idea what just happened'
/ENDHELP

int mods_MaximizeWrapTime(bool azFlag, bool rotFlag, char *side)
================================================================
Implements the MaximizeWrapTime() function (Instrument ICD Section 8.10),
sending the arguments given. If an error occurs, return false and set 
mods_error(). 

Example: MaximizeWrapTime F F left
/ENDHELP

int mods_MoveFocus(double absPos, char *optic, char *side)
==========================================================
Implements the MoveFocus() function (Instrument ICD Section 8.11), 
sending the arguments given. If an error occurs, return false and 
set mods_error().

Example: MoveFocus 127.34 M2 left

See Also: mods_StepFocus()
/ENDHELP

int mods_StepFocus(double relPos, char *optic, char *side)

  Implements the StepFocus() function (Instrument ICD Section 8.45), 
  sending the arguments given. If an error occurs, return false and 
  set mods_error().

  Example: mods_StepFocus(-0.123,"M2","left");
  See Also: mods_MoveFocus()
/ENDHELP

int 
mods_OffsetPointing(double dPA, double dRA, double dDec, char *moveType, char *side)

  Implements the OffsetPointing() function (Instrument ICD Section 8.17), 
  sending the arguments given to make either a pointing and/or rotator offset.
  dPA, dRA, and dDec are in radians. moveType is either "REL" or "ABS".

  If an error occurs, return false and set mods_error().

  By default, we always use COORDSYS="RADEC", OPE="DEFAULT", and
  NEW_POSITION="". Note that the Instrument ICD on pages 45 and 46 have a
  number of typos  check with Chris Biddick regarding correct call syntax.

  Example: mods_OffsetPointing(0.123,-0.005,0.0,"REL","left");

  See Also: mods_PresetTelescope(), ...
/ENDHELP

int 
mods_PresetTelescope(double rotPA, char *rotMode, char *opMode, char *side)

  Implements the PresetTelescope() function (Instrument ICD Section 8.23), 
  sending the arguments given. rotPA is in radians, rotMode and opMode are 
  as described in Section 8.23. Generally we use rotMode="POSITION", and 
  opMode={"STATIC",TRACKE","GUIDE"}.

  The target and guide star celestial coordinates must have been defined 
  previously by mods_SetTarget() and mods_SetStars() calls.

  If an error occurs, return false and set mods_error().

  Example: mods_PresetTelescope(0.0,"POSITION","GUIDE","left");

  See Also: mods_SetTarget(), mods_SetStars(), ...
/ENDHELP

int mods_remove()

  Implements the remove() function (Instrument ICD Section 8.25) 
  to remove target, offset, and hotspot coordinates.

  If an error occurs, return false and set mods_error().

  See Also: mods_SetTarget(), mods_SetStars(), mods_PresetTelescope()
/ENDHELP

int mods_RotReady(bool enable, char *side)

  Implements the RotReady() function (Instrument ICD Section 8.30). 
  A call to mods_RotReady() must preceed and follow a call to 
  mod_RotServicePosition() to attach and release the rotator for this 
  maintenance function which allows us to rotate the instrument to a 
  service position even when it is not the authorized beamreceiving 
  instrument.

  If an error occurs, return false and set mods_error().

  Example: mods_RotReady(true,"left")

  See Also: mods_RotServicePosition()
/ENDHELP

int mods_RotServicePosition(double rotAngle, char *side)

  Implements the RotServicePosition() function (Instrument ICD Section 8.32).
  rotAngle is in degrees (note difference from PA given in radians). 
  This function must be preceeded by a mods_RotReady() call.

  If an error occurs, return false and set mods_error().

  Example: mods_RotServicePosition(90.5,"left");

  See Also: mods_RotReady()
/ENDHELP

int mods_SetDDLogging(int flag)

  Implements the SetDDLogging() function (Instrument ICD Section 8.36). 
  If an error occurs, return false and set mods_error().

  Example: mods_SetDDLogging(false)

  See Also: ...
/ENDHELP


int mods_SetTarget(double RA, double Dec, double Epoch, float lambda)

  Implements the SetTarget() function (Instrument ICD Section 8.42). 
  RA and Dec are in radians, Epoch in decimal years, and lambda in decimal 
  microns. We always set COORDSYS="RADEC" internally in the call to 
  SetTarget().

  If an error occurs, return false and set mods_error().

  A call to mods_SetTarget() or mods_SetStars() must preceed a 
  mods_PresetTelescope() call.

  Example: mods_SetTarget(raRad,decRad,2009.2,0.5)

  See Also: mods_PresetTelescope(), mods_SetStars()
/ENDHELP

int mods_SetStars(char *targName, double targRA, double targDec, double targEpoch, char *gsName, double gsRA, double gsDec, double gsEpoch, float lambda)

  Implements the SetStars() function (Instrument ICD Section 8.41). 
  RA and Dec are in radians, Epoch in decimal years, and lambda in 
  decimal microns. We always set COORDSYS="RADEC" and Equinox to "J2000"
  internally.

  If an error occurs, return false and set mods_error().
  A call to mods_SetTarget() or mods_SetStars() must preceed a
  mods_PresetTelescope() call.

  Example:
  mods_SetStars("NGC1068",raRad,decRad,2000.0,"GS123456+0012.5",raGSRad,decGSRad,2000.0,0.56)

  See Also: mods_PresetTelescope(), mods_SetTarget()
/ENDHELP

int mods_UpdatePointingReference(char *side)

Implements the UpdatePointingReference() function (Instrument ICD Section 8.48).

We always use OFFSETTYPE="RADEC" internally. If an error occurs, return 
false and set mods_error().

Example: mods_UpdatePointingReference("left")

See Also: mods_PresetTelescope(), mods_SetStars()
/ENDHELP

int mods_UpdateTargetWavelength(float lambda, char *side)

  Implements the UpdateTargetWavelength() function (Instrument ICD Section 8.49).
  For MODS there are three typical wavelength values employed, depending on the
  mode:
   Dichroic Mode: 0.56
   Blue Direct Mode: 0.45
   Red Direct Mode: 0.65

   If an error occurs, return false and set mods_error().

   Example: mods_UpdateTargetWavelength(0.56,"left")

   See Also: mods_PresetTelescope(), mods_SetStars(), mods_SetTarget()
/ENDHELP

int mods_GetMODSData(modsData_t &modsdd, char *side)

  Implements the GetParameter() function (Instrument ICD Section 8.7), 
  asking for a fixed set of data-dictionary entries and then loading them 
  into the modsData struct (the first argument is a pointer to the lbtData 
  struct defined by the client program). This data structure is then used by
  the client program to extract the information it needs from the various 
  data-dictionary entries. See mods_iifutils.h for a description of the 
  lbtData struct.

  If an error occurs, return false and set mods_error().

  Example: mods_GetMODSData(&modsSX,"left")
/ENDHELP

int mods_GetTCSData(lbtData_t &lbt, char *side)

  Implements the GetParameter() function (Instrument ICD Section 8.7), 
  asking for a fixed set of data-dictionary entries and then loading them 
  into the lbtData struct (the first argument is a pointer to the lbtData 
  struct defined by the client program). This data structure is then used by
  the client program to extract the information it needs from the various 
  data-dictionary entries. See mods_iifutils.h for a description of the 
  lbtData struct.

  If an error occurs, return false and set mods_error().

  Example: GetTCSData iifDD_file left
/ENDHELP

int mods_SetMODSData(modsData_t &modsdd, char *side)

  Implements the SetParameter() function (Instrument ICD Section 8.7), 
  sending relevant MODS parameters contained in the modsPar struct.
  During lab testing, the modsPar struct contains the standard dummy int,
  float, and string test parameters.
  Write the MODS specific Data Dictionary items only.

  If an error occurs, return false and set mods_error().

  Example: mods_SetMODSPars Value_file left 
/ENDHELP

int mods_SetParameter(char *DDName, char *DDKey)

Implements the SetParameter() function (Instrument ICD Section 8.39), 
sending relevant MODS parameters contained in the modsPar struct. 

During lab testing, the modsPar struct contains the standard dummy int, 
float, and string test parameters. See modsiifutils.h for the description of 
the modsPar struct. If an error occurs, return false and set mods_error().

Example: SetParameter side[0].what value;

See Also: mods_GetTCSData()
/ENDHELP

int mods_GetParameter(char *DDName)
===================================
Implements the GetParameter() function (Instrument ICD Section 8.39), 
get relevant DD parameters.

Example: GetParameter xxx.MODS1.side[0].xxxxxx

See Also: mods_GetParameter()
/ENDHELP

int mods_iifHelp(char *help_file)
=================================
Implements the iifhelp() function

Example: iifHelp(help_file);

See Also:....
/ENDHELP
