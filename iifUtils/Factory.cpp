//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Factory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Factory.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_lbto_Factory_ids[2] =
{
    "::Ice::Object",
    "::lbto::Factory"
};
const ::std::string iceC_lbto_Factory_ops[] =
{
    "create",
    "debugMode",
    "destroy",
    "destroyProxy",
    "getProxy",
    "getProxyFocalStation",
    "getProxyInstrument",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "listConnections"
};
const ::std::string iceC_lbto_Factory_create_name = "create";
const ::std::string iceC_lbto_Factory_destroy_name = "destroy";
const ::std::string iceC_lbto_Factory_destroyProxy_name = "destroyProxy";
const ::std::string iceC_lbto_Factory_getProxy_name = "getProxy";
const ::std::string iceC_lbto_Factory_getProxyInstrument_name = "getProxyInstrument";
const ::std::string iceC_lbto_Factory_getProxyFocalStation_name = "getProxyFocalStation";
const ::std::string iceC_lbto_Factory_listConnections_name = "listConnections";
const ::std::string iceC_lbto_Factory_debugMode_name = "debugMode";

}

bool
lbto::Factory::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_lbto_Factory_ids, iceC_lbto_Factory_ids + 2, s);
}

::std::vector<::std::string>
lbto::Factory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_lbto_Factory_ids[0], &iceC_lbto_Factory_ids[2]);
}

::std::string
lbto::Factory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
lbto::Factory::ice_staticId()
{
    static const ::std::string typeId = "::lbto::Factory";
    return typeId;
}

/// \cond INTERNAL
bool
lbto::Factory::_iceD_create(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_proxyName;
    ::std::string iceP_focalStation;
    ::std::string iceP_instrumentID;
    istr->readAll(iceP_proxyName, iceP_focalStation, iceP_instrumentID);
    inS.endReadParams();
    ::std::shared_ptr<IIFServerPrx> ret = this->create(::std::move(iceP_proxyName), ::std::move(iceP_focalStation), ::std::move(iceP_instrumentID), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<IIFServerPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    this->destroy(::std::move(iceP_proxy), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_destroyProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_proxyName;
    istr->readAll(iceP_proxyName);
    inS.endReadParams();
    this->destroyProxy(::std::move(iceP_proxyName), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_getProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_proxyName;
    istr->readAll(iceP_proxyName);
    inS.endReadParams();
    ::std::string ret = this->getProxy(::std::move(iceP_proxyName), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_getProxyInstrument(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_proxyName;
    istr->readAll(iceP_proxyName);
    inS.endReadParams();
    ::std::string ret = this->getProxyInstrument(::std::move(iceP_proxyName), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_getProxyFocalStation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_proxyName;
    istr->readAll(iceP_proxyName);
    inS.endReadParams();
    ::std::string ret = this->getProxyFocalStation(::std::move(iceP_proxyName), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_listConnections(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->listConnections(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_debugMode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_b;
    istr->readAll(iceP_b);
    inS.endReadParams();
    this->debugMode(iceP_b, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_lbto_Factory_ops, iceC_lbto_Factory_ops + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_lbto_Factory_ops)
    {
        case 0:
        {
            return _iceD_create(in, current);
        }
        case 1:
        {
            return _iceD_debugMode(in, current);
        }
        case 2:
        {
            return _iceD_destroy(in, current);
        }
        case 3:
        {
            return _iceD_destroyProxy(in, current);
        }
        case 4:
        {
            return _iceD_getProxy(in, current);
        }
        case 5:
        {
            return _iceD_getProxyFocalStation(in, current);
        }
        case 6:
        {
            return _iceD_getProxyInstrument(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_listConnections(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
lbto::FactoryPrx::_iceI_create(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::lbto::IIFServerPrx>>>& outAsync, const ::std::string& iceP_proxyName, const ::std::string& iceP_focalStation, const ::std::string& iceP_instrumentID, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_lbto_Factory_create_name);
    outAsync->invoke(iceC_lbto_Factory_create_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxyName, iceP_focalStation, iceP_instrumentID);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
lbto::FactoryPrx::_iceI_destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<IIFServerPrx>& iceP_proxy, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_lbto_Factory_destroy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
lbto::FactoryPrx::_iceI_destroyProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_proxyName, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_lbto_Factory_destroyProxy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxyName);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
lbto::FactoryPrx::_iceI_getProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_proxyName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_lbto_Factory_getProxy_name);
    outAsync->invoke(iceC_lbto_Factory_getProxy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxyName);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
lbto::FactoryPrx::_iceI_getProxyInstrument(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_proxyName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_lbto_Factory_getProxyInstrument_name);
    outAsync->invoke(iceC_lbto_Factory_getProxyInstrument_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxyName);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
lbto::FactoryPrx::_iceI_getProxyFocalStation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_proxyName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_lbto_Factory_getProxyFocalStation_name);
    outAsync->invoke(iceC_lbto_Factory_getProxyFocalStation_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxyName);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
lbto::FactoryPrx::_iceI_listConnections(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_lbto_Factory_listConnections_name);
    outAsync->invoke(iceC_lbto_Factory_listConnections_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
lbto::FactoryPrx::_iceI_debugMode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_b, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_lbto_Factory_debugMode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
lbto::FactoryPrx::_newInstance() const
{
    return ::IceInternal::createProxy<FactoryPrx>();
}
/// \endcond

const ::std::string&
lbto::FactoryPrx::ice_staticId()
{
    return Factory::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_lbto_Factory_create_name = "create";

const ::std::string iceC_lbto_Factory_destroy_name = "destroy";

const ::std::string iceC_lbto_Factory_destroyProxy_name = "destroyProxy";

const ::std::string iceC_lbto_Factory_getProxy_name = "getProxy";

const ::std::string iceC_lbto_Factory_getProxyInstrument_name = "getProxyInstrument";

const ::std::string iceC_lbto_Factory_getProxyFocalStation_name = "getProxyFocalStation";

const ::std::string iceC_lbto_Factory_listConnections_name = "listConnections";

const ::std::string iceC_lbto_Factory_debugMode_name = "debugMode";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::lbto::upCast(Factory* p) { return p; }

void
::IceProxy::lbto::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Factory>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Factory;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::lbto::Factory::_iceI_begin_create(const ::std::string& iceP_proxyName, const ::std::string& iceP_focalStation, const ::std::string& iceP_instrumentID, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_lbto_Factory_create_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_lbto_Factory_create_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_lbto_Factory_create_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxyName);
        ostr->write(iceP_focalStation);
        ostr->write(iceP_instrumentID);
        result->endWriteParams();
        result->invoke(iceC_lbto_Factory_create_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::lbto::IIFServerPrx
IceProxy::lbto::Factory::end_create(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_lbto_Factory_create_name);
    ::lbto::IIFServerPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::lbto::Factory::_iceI_begin_destroy(const ::lbto::IIFServerPrx& iceP_proxy, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_lbto_Factory_destroy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_lbto_Factory_destroy_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxy);
        result->endWriteParams();
        result->invoke(iceC_lbto_Factory_destroy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::lbto::Factory::end_destroy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_lbto_Factory_destroy_name);
}

::Ice::AsyncResultPtr
IceProxy::lbto::Factory::_iceI_begin_destroyProxy(const ::std::string& iceP_proxyName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_lbto_Factory_destroyProxy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_lbto_Factory_destroyProxy_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxyName);
        result->endWriteParams();
        result->invoke(iceC_lbto_Factory_destroyProxy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::lbto::Factory::end_destroyProxy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_lbto_Factory_destroyProxy_name);
}

::Ice::AsyncResultPtr
IceProxy::lbto::Factory::_iceI_begin_getProxy(const ::std::string& iceP_proxyName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_lbto_Factory_getProxy_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_lbto_Factory_getProxy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_lbto_Factory_getProxy_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxyName);
        result->endWriteParams();
        result->invoke(iceC_lbto_Factory_getProxy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::lbto::Factory::end_getProxy(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_lbto_Factory_getProxy_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::lbto::Factory::_iceI_begin_getProxyInstrument(const ::std::string& iceP_proxyName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_lbto_Factory_getProxyInstrument_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_lbto_Factory_getProxyInstrument_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_lbto_Factory_getProxyInstrument_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxyName);
        result->endWriteParams();
        result->invoke(iceC_lbto_Factory_getProxyInstrument_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::lbto::Factory::end_getProxyInstrument(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_lbto_Factory_getProxyInstrument_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::lbto::Factory::_iceI_begin_getProxyFocalStation(const ::std::string& iceP_proxyName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_lbto_Factory_getProxyFocalStation_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_lbto_Factory_getProxyFocalStation_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_lbto_Factory_getProxyFocalStation_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxyName);
        result->endWriteParams();
        result->invoke(iceC_lbto_Factory_getProxyFocalStation_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::lbto::Factory::end_getProxyFocalStation(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_lbto_Factory_getProxyFocalStation_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::lbto::Factory::_iceI_begin_listConnections(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_lbto_Factory_listConnections_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_lbto_Factory_listConnections_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_lbto_Factory_listConnections_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_lbto_Factory_listConnections_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::lbto::Factory::end_listConnections(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_lbto_Factory_listConnections_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::lbto::Factory::_iceI_begin_debugMode(bool iceP_b, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_lbto_Factory_debugMode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_lbto_Factory_debugMode_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_b);
        result->endWriteParams();
        result->invoke(iceC_lbto_Factory_debugMode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::lbto::Factory::end_debugMode(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_lbto_Factory_debugMode_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::lbto::Factory::_newInstance() const
{
    return new Factory;
}
/// \endcond

const ::std::string&
IceProxy::lbto::Factory::ice_staticId()
{
    return ::lbto::Factory::ice_staticId();
}

lbto::Factory::~Factory()
{
}

/// \cond INTERNAL
::Ice::Object* lbto::upCast(Factory* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_lbto_Factory_ids[2] =
{
    "::Ice::Object",
    "::lbto::Factory"
};

}

bool
lbto::Factory::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_lbto_Factory_ids, iceC_lbto_Factory_ids + 2, s);
}

::std::vector< ::std::string>
lbto::Factory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_lbto_Factory_ids[0], &iceC_lbto_Factory_ids[2]);
}

const ::std::string&
lbto::Factory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
lbto::Factory::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::lbto::Factory";
    return typeId;
#else
    return iceC_lbto_Factory_ids[1];
#endif
}

/// \cond INTERNAL
bool
lbto::Factory::_iceD_create(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_proxyName;
    ::std::string iceP_focalStation;
    ::std::string iceP_instrumentID;
    istr->read(iceP_proxyName);
    istr->read(iceP_focalStation);
    istr->read(iceP_instrumentID);
    inS.endReadParams();
    IIFServerPrx ret = this->create(iceP_proxyName, iceP_focalStation, iceP_instrumentID, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IIFServerPrx iceP_proxy;
    istr->read(iceP_proxy);
    inS.endReadParams();
    this->destroy(iceP_proxy, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_destroyProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_proxyName;
    istr->read(iceP_proxyName);
    inS.endReadParams();
    this->destroyProxy(iceP_proxyName, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_getProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_proxyName;
    istr->read(iceP_proxyName);
    inS.endReadParams();
    ::std::string ret = this->getProxy(iceP_proxyName, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_getProxyInstrument(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_proxyName;
    istr->read(iceP_proxyName);
    inS.endReadParams();
    ::std::string ret = this->getProxyInstrument(iceP_proxyName, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_getProxyFocalStation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_proxyName;
    istr->read(iceP_proxyName);
    inS.endReadParams();
    ::std::string ret = this->getProxyFocalStation(iceP_proxyName, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_listConnections(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->listConnections(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
lbto::Factory::_iceD_debugMode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_b;
    istr->read(iceP_b);
    inS.endReadParams();
    this->debugMode(iceP_b, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_lbto_Factory_all[] =
{
    "create",
    "debugMode",
    "destroy",
    "destroyProxy",
    "getProxy",
    "getProxyFocalStation",
    "getProxyInstrument",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "listConnections"
};

}

/// \cond INTERNAL
bool
lbto::Factory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_lbto_Factory_all, iceC_lbto_Factory_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_lbto_Factory_all)
    {
        case 0:
        {
            return _iceD_create(in, current);
        }
        case 1:
        {
            return _iceD_debugMode(in, current);
        }
        case 2:
        {
            return _iceD_destroy(in, current);
        }
        case 3:
        {
            return _iceD_destroyProxy(in, current);
        }
        case 4:
        {
            return _iceD_getProxy(in, current);
        }
        case 5:
        {
            return _iceD_getProxyFocalStation(in, current);
        }
        case 6:
        {
            return _iceD_getProxyInstrument(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_listConnections(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
lbto::Factory::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Factory, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
lbto::Factory::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Factory, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
lbto::_icePatchObjectPtr(FactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = FactoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Factory::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
